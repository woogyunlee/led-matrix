
fw20250707.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002fb0  08002fb0  00003fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003018  08003018  000050c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003018  08003018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003020  08003020  000050c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003020  08003020  00004020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003024  08003024  00004024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08003028  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  200000c0  080030e8  000050c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  080030e8  00005564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb59  00000000  00000000  000050e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e02  00000000  00000000  00010c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00012a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095c  00000000  00000000  00013648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001819e  00000000  00000000  00013fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddae  00000000  00000000  0002c142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a629  00000000  00000000  00039ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4519  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003670  00000000  00000000  000c455c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000c7bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f98 	.word	0x08002f98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08002f98 	.word	0x08002f98

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b38      	ldr	r3, [pc, #224]	@ (8000254 <MX_GPIO_Init+0xf8>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a37      	ldr	r2, [pc, #220]	@ (8000254 <MX_GPIO_Init+0xf8>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b35      	ldr	r3, [pc, #212]	@ (8000254 <MX_GPIO_Init+0xf8>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b32      	ldr	r3, [pc, #200]	@ (8000254 <MX_GPIO_Init+0xf8>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a31      	ldr	r2, [pc, #196]	@ (8000254 <MX_GPIO_Init+0xf8>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b2f      	ldr	r3, [pc, #188]	@ (8000254 <MX_GPIO_Init+0xf8>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000254 <MX_GPIO_Init+0xf8>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000254 <MX_GPIO_Init+0xf8>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b29      	ldr	r3, [pc, #164]	@ (8000254 <MX_GPIO_Init+0xf8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b26      	ldr	r3, [pc, #152]	@ (8000254 <MX_GPIO_Init+0xf8>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a25      	ldr	r2, [pc, #148]	@ (8000254 <MX_GPIO_Init+0xf8>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b23      	ldr	r3, [pc, #140]	@ (8000254 <MX_GPIO_Init+0xf8>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80001d0:	2200      	movs	r2, #0
 80001d2:	f24e 0103 	movw	r1, #57347	@ 0xe003
 80001d6:	4820      	ldr	r0, [pc, #128]	@ (8000258 <MX_GPIO_Init+0xfc>)
 80001d8:	f000 ffd6 	bl	8001188 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	21f0      	movs	r1, #240	@ 0xf0
 80001e0:	481e      	ldr	r0, [pc, #120]	@ (800025c <MX_GPIO_Init+0x100>)
 80001e2:	f000 ffd1 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80001ec:	481c      	ldr	r0, [pc, #112]	@ (8000260 <MX_GPIO_Init+0x104>)
 80001ee:	f000 ffcb 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80001f2:	f24e 0303 	movw	r3, #57347	@ 0xe003
 80001f6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	4813      	ldr	r0, [pc, #76]	@ (8000258 <MX_GPIO_Init+0xfc>)
 800020c:	f000 fe38 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000210:	23f0      	movs	r3, #240	@ 0xf0
 8000212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000214:	2301      	movs	r3, #1
 8000216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021c:	2302      	movs	r3, #2
 800021e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	480d      	ldr	r0, [pc, #52]	@ (800025c <MX_GPIO_Init+0x100>)
 8000228:	f000 fe2a 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800022c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000232:	2301      	movs	r3, #1
 8000234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000236:	2300      	movs	r3, #0
 8000238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023a:	2302      	movs	r3, #2
 800023c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023e:	f107 0310 	add.w	r3, r7, #16
 8000242:	4619      	mov	r1, r3
 8000244:	4806      	ldr	r0, [pc, #24]	@ (8000260 <MX_GPIO_Init+0x104>)
 8000246:	f000 fe1b 	bl	8000e80 <HAL_GPIO_Init>

}
 800024a:	bf00      	nop
 800024c:	3720      	adds	r7, #32
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40021000 	.word	0x40021000
 8000258:	40011000 	.word	0x40011000
 800025c:	40010800 	.word	0x40010800
 8000260:	40010c00 	.word	0x40010c00

08000264 <sendRGB>:
  {0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0}
};  

void sendRGB(uint8_t Blue, uint8_t Green, uint8_t Red) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
 800026e:	460b      	mov	r3, r1
 8000270:	71bb      	strb	r3, [r7, #6]
 8000272:	4613      	mov	r3, r2
 8000274:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOC, SER_RED_Pin, 		(Blue & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	b2db      	uxtb	r3, r3
 800027e:	461a      	mov	r2, r3
 8000280:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000284:	4812      	ldr	r0, [pc, #72]	@ (80002d0 <sendRGB+0x6c>)
 8000286:	f000 ff7f 	bl	8001188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, SER_GREEN_Pin, 	(Green & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800028a:	79bb      	ldrb	r3, [r7, #6]
 800028c:	f003 0301 	and.w	r3, r3, #1
 8000290:	b2db      	uxtb	r3, r3
 8000292:	461a      	mov	r2, r3
 8000294:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000298:	480d      	ldr	r0, [pc, #52]	@ (80002d0 <sendRGB+0x6c>)
 800029a:	f000 ff75 	bl	8001188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, SER_BLUE_Pin, 	(Red & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);		
 800029e:	797b      	ldrb	r3, [r7, #5]
 80002a0:	f003 0301 	and.w	r3, r3, #1
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	461a      	mov	r2, r3
 80002a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002ac:	4808      	ldr	r0, [pc, #32]	@ (80002d0 <sendRGB+0x6c>)
 80002ae:	f000 ff6b 	bl	8001188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CLK_PIN, GPIO_PIN_SET);		// 시프트 클럭 ↑
 80002b2:	2201      	movs	r2, #1
 80002b4:	2102      	movs	r1, #2
 80002b6:	4806      	ldr	r0, [pc, #24]	@ (80002d0 <sendRGB+0x6c>)
 80002b8:	f000 ff66 	bl	8001188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CLK_PIN, GPIO_PIN_RESET);		// 시프트 클럭 ↓				
 80002bc:	2200      	movs	r2, #0
 80002be:	2102      	movs	r1, #2
 80002c0:	4803      	ldr	r0, [pc, #12]	@ (80002d0 <sendRGB+0x6c>)
 80002c2:	f000 ff61 	bl	8001188 <HAL_GPIO_WritePin>
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40011000 	.word	0x40011000

080002d4 <selectRow>:
void selectRow(uint8_t value){	// 3비트 주소를 74HC238에 설정하는 함수
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (value & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	f003 0301 	and.w	r3, r3, #1
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	461a      	mov	r2, r3
 80002e8:	2110      	movs	r1, #16
 80002ea:	4814      	ldr	r0, [pc, #80]	@ (800033c <selectRow+0x68>)
 80002ec:	f000 ff4c 	bl	8001188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, (value & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	105b      	asrs	r3, r3, #1
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	461a      	mov	r2, r3
 80002fe:	2120      	movs	r1, #32
 8000300:	480e      	ldr	r0, [pc, #56]	@ (800033c <selectRow+0x68>)
 8000302:	f000 ff41 	bl	8001188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, (value & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	109b      	asrs	r3, r3, #2
 800030a:	b2db      	uxtb	r3, r3
 800030c:	f003 0301 	and.w	r3, r3, #1
 8000310:	b2db      	uxtb	r3, r3
 8000312:	461a      	mov	r2, r3
 8000314:	2140      	movs	r1, #64	@ 0x40
 8000316:	4809      	ldr	r0, [pc, #36]	@ (800033c <selectRow+0x68>)
 8000318:	f000 ff36 	bl	8001188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, (value & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);	
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	10db      	asrs	r3, r3, #3
 8000320:	b2db      	uxtb	r3, r3
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	b2db      	uxtb	r3, r3
 8000328:	461a      	mov	r2, r3
 800032a:	2180      	movs	r1, #128	@ 0x80
 800032c:	4803      	ldr	r0, [pc, #12]	@ (800033c <selectRow+0x68>)
 800032e:	f000 ff2b 	bl	8001188 <HAL_GPIO_WritePin>
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40010800 	.word	0x40010800

08000340 <displayMatrix_386us>:
}
static uint8_t row_num = 0;
static uint8_t rotate = 0;
static uint8_t col_num = 0;

void displayMatrix_386us() {
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, LATCH_PIN, GPIO_PIN_RESET);	 // 래치 ↓
 8000346:	2200      	movs	r2, #0
 8000348:	2101      	movs	r1, #1
 800034a:	482d      	ldr	r0, [pc, #180]	@ (8000400 <displayMatrix_386us+0xc0>)
 800034c:	f000 ff1c 	bl	8001188 <HAL_GPIO_WritePin>
     for (int col = 0; col < COLS; col++)
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	e048      	b.n	80003e8 <displayMatrix_386us+0xa8>
         sendRGB(BlueMatrix[row_num%ROWS][col], GreenMatrix[row_num%ROWS][col], RedMatrix[row_num%ROWS][col]);
 8000356:	4b2b      	ldr	r3, [pc, #172]	@ (8000404 <displayMatrix_386us+0xc4>)
 8000358:	781a      	ldrb	r2, [r3, #0]
 800035a:	4b2b      	ldr	r3, [pc, #172]	@ (8000408 <displayMatrix_386us+0xc8>)
 800035c:	fba3 1302 	umull	r1, r3, r3, r2
 8000360:	08d9      	lsrs	r1, r3, #3
 8000362:	460b      	mov	r3, r1
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	440b      	add	r3, r1
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	1ad3      	subs	r3, r2, r3
 800036c:	b2db      	uxtb	r3, r3
 800036e:	4619      	mov	r1, r3
 8000370:	4a26      	ldr	r2, [pc, #152]	@ (800040c <displayMatrix_386us+0xcc>)
 8000372:	460b      	mov	r3, r1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	441a      	add	r2, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4413      	add	r3, r2
 8000380:	7818      	ldrb	r0, [r3, #0]
 8000382:	4b20      	ldr	r3, [pc, #128]	@ (8000404 <displayMatrix_386us+0xc4>)
 8000384:	781a      	ldrb	r2, [r3, #0]
 8000386:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <displayMatrix_386us+0xc8>)
 8000388:	fba3 1302 	umull	r1, r3, r3, r2
 800038c:	08d9      	lsrs	r1, r3, #3
 800038e:	460b      	mov	r3, r1
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	440b      	add	r3, r1
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	1ad3      	subs	r3, r2, r3
 8000398:	b2db      	uxtb	r3, r3
 800039a:	4619      	mov	r1, r3
 800039c:	4a1c      	ldr	r2, [pc, #112]	@ (8000410 <displayMatrix_386us+0xd0>)
 800039e:	460b      	mov	r3, r1
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	440b      	add	r3, r1
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	441a      	add	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4413      	add	r3, r2
 80003ac:	781c      	ldrb	r4, [r3, #0]
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <displayMatrix_386us+0xc4>)
 80003b0:	781a      	ldrb	r2, [r3, #0]
 80003b2:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <displayMatrix_386us+0xc8>)
 80003b4:	fba3 1302 	umull	r1, r3, r3, r2
 80003b8:	08d9      	lsrs	r1, r3, #3
 80003ba:	460b      	mov	r3, r1
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	440b      	add	r3, r1
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	1ad3      	subs	r3, r2, r3
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	4619      	mov	r1, r3
 80003c8:	4a12      	ldr	r2, [pc, #72]	@ (8000414 <displayMatrix_386us+0xd4>)
 80003ca:	460b      	mov	r3, r1
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	440b      	add	r3, r1
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	441a      	add	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	461a      	mov	r2, r3
 80003dc:	4621      	mov	r1, r4
 80003de:	f7ff ff41 	bl	8000264 <sendRGB>
     for (int col = 0; col < COLS; col++)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	3301      	adds	r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2b09      	cmp	r3, #9
 80003ec:	ddb3      	ble.n	8000356 <displayMatrix_386us+0x16>
	  HAL_GPIO_WritePin(GPIOC, LATCH_PIN, GPIO_PIN_SET);		 // 래치 ↑        
 80003ee:	2201      	movs	r2, #1
 80003f0:	2101      	movs	r1, #1
 80003f2:	4803      	ldr	r0, [pc, #12]	@ (8000400 <displayMatrix_386us+0xc0>)
 80003f4:	f000 fec8 	bl	8001188 <HAL_GPIO_WritePin>
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd90      	pop	{r4, r7, pc}
 8000400:	40011000 	.word	0x40011000
 8000404:	200002a4 	.word	0x200002a4
 8000408:	cccccccd 	.word	0xcccccccd
 800040c:	20000000 	.word	0x20000000
 8000410:	200001dc 	.word	0x200001dc
 8000414:	20000240 	.word	0x20000240

08000418 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//HAL_UART
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	static int num = 0;
	
	if(htim->Instance == TIM2){		//368 usec
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000428:	d101      	bne.n	800042e <HAL_TIM_PeriodElapsedCallback+0x16>
		displayMatrix_386us();
 800042a:	f7ff ff89 	bl	8000340 <displayMatrix_386us>
	}
	if(htim->Instance == TIM3){	//1second
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a1d      	ldr	r2, [pc, #116]	@ (80004a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d113      	bne.n	8000460 <HAL_TIM_PeriodElapsedCallback+0x48>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
		sprintf((char *)buffer, "%d \r\n", num++);
 8000438:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x94>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	491b      	ldr	r1, [pc, #108]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000440:	600a      	str	r2, [r1, #0]
 8000442:	461a      	mov	r2, r3
 8000444:	491a      	ldr	r1, [pc, #104]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000446:	481b      	ldr	r0, [pc, #108]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000448:	f002 f8f6 	bl	8002638 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen((char *)buffer), 100);
 800044c:	4819      	ldr	r0, [pc, #100]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800044e:	f7ff fe7d 	bl	800014c <strlen>
 8000452:	4603      	mov	r3, r0
 8000454:	b29a      	uxth	r2, r3
 8000456:	2364      	movs	r3, #100	@ 0x64
 8000458:	4916      	ldr	r1, [pc, #88]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800045a:	4817      	ldr	r0, [pc, #92]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800045c:	f001 ff18 	bl	8002290 <HAL_UART_Transmit>
	}
	if(htim->Instance == TIM4){		//368 * 10 usec
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a15      	ldr	r2, [pc, #84]	@ (80004bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d119      	bne.n	800049e <HAL_TIM_PeriodElapsedCallback+0x86>
		selectRow(row_num%ROWS);
 800046a:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000470:	fba3 1302 	umull	r1, r3, r3, r2
 8000474:	08d9      	lsrs	r1, r3, #3
 8000476:	460b      	mov	r3, r1
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	440b      	add	r3, r1
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	1ad3      	subs	r3, r2, r3
 8000480:	b2db      	uxtb	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff26 	bl	80002d4 <selectRow>
		row_num++;
 8000488:	4b0d      	ldr	r3, [pc, #52]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	3301      	adds	r3, #1
 800048e:	b2da      	uxtb	r2, r3
 8000490:	4b0b      	ldr	r3, [pc, #44]	@ (80004c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000492:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000494:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000498:	480b      	ldr	r0, [pc, #44]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800049a:	f000 fe8d 	bl	80011b8 <HAL_GPIO_TogglePin>
	}
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40000400 	.word	0x40000400
 80004ac:	200002a8 	.word	0x200002a8
 80004b0:	08002fb0 	.word	0x08002fb0
 80004b4:	200000dc 	.word	0x200000dc
 80004b8:	200003d0 	.word	0x200003d0
 80004bc:	40000800 	.word	0x40000800
 80004c0:	200002a4 	.word	0x200002a4
 80004c4:	cccccccd 	.word	0xcccccccd
 80004c8:	40010c00 	.word	0x40010c00

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fb66 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f81e 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f7ff fe40 	bl	800015c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 fa8c 	bl	80009f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 fa60 	bl	80009a4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80004e4:	f000 f91a 	bl	800071c <MX_TIM2_Init>
  MX_TIM3_Init();
 80004e8:	f000 f964 	bl	80007b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004ec:	f000 f9b0 	bl	8000850 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//	test_74HC238();
	HAL_TIM_Base_Start_IT(&htim2);
 80004f0:	4805      	ldr	r0, [pc, #20]	@ (8000508 <main+0x3c>)
 80004f2:	f001 fadb 	bl	8001aac <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80004f6:	4805      	ldr	r0, [pc, #20]	@ (800050c <main+0x40>)
 80004f8:	f001 fad8 	bl	8001aac <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80004fc:	4804      	ldr	r0, [pc, #16]	@ (8000510 <main+0x44>)
 80004fe:	f001 fad5 	bl	8001aac <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_GPIO_WritePin()

  while (1){
 8000502:	bf00      	nop
 8000504:	e7fd      	b.n	8000502 <main+0x36>
 8000506:	bf00      	nop
 8000508:	200002b0 	.word	0x200002b0
 800050c:	200002f8 	.word	0x200002f8
 8000510:	20000340 	.word	0x20000340

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b090      	sub	sp, #64	@ 0x40
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	2228      	movs	r2, #40	@ 0x28
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 f8aa 	bl	800267c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000536:	2301      	movs	r3, #1
 8000538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800053e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000548:	2302      	movs	r3, #2
 800054a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000550:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000552:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0318 	add.w	r3, r7, #24
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fe45 	bl	80011ec <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000568:	f000 f819 	bl	800059e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	230f      	movs	r3, #15
 800056e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000570:	2302      	movs	r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000578:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800057c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2102      	movs	r1, #2
 8000586:	4618      	mov	r0, r3
 8000588:	f001 f8b2 	bl	80016f0 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000592:	f000 f804 	bl	800059e <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3740      	adds	r7, #64	@ 0x40
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a2:	b672      	cpsid	i
}
 80005a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a6:	bf00      	nop
 80005a8:	e7fd      	b.n	80005a6 <Error_Handler+0x8>
	...

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <HAL_MspInit+0x5c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a14      	ldr	r2, [pc, #80]	@ (8000608 <HAL_MspInit+0x5c>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <HAL_MspInit+0x5c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <HAL_MspInit+0x5c>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <HAL_MspInit+0x60>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <HAL_MspInit+0x60>)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000
 800060c:	40010000 	.word	0x40010000

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <NMI_Handler+0x4>

08000618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <HardFault_Handler+0x4>

08000620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <MemManage_Handler+0x4>

08000628 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <UsageFault_Handler+0x4>

08000638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000660:	f000 fae4 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800066c:	4802      	ldr	r0, [pc, #8]	@ (8000678 <TIM2_IRQHandler+0x10>)
 800066e:	f001 fa6f 	bl	8001b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200002b0 	.word	0x200002b0

0800067c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000680:	4802      	ldr	r0, [pc, #8]	@ (800068c <TIM3_IRQHandler+0x10>)
 8000682:	f001 fa65 	bl	8001b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200002f8 	.word	0x200002f8

08000690 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000694:	4802      	ldr	r0, [pc, #8]	@ (80006a0 <TIM4_IRQHandler+0x10>)
 8000696:	f001 fa5b 	bl	8001b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000340 	.word	0x20000340

080006a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006ac:	4a14      	ldr	r2, [pc, #80]	@ (8000700 <_sbrk+0x5c>)
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <_sbrk+0x60>)
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d102      	bne.n	80006c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <_sbrk+0x64>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	@ (800070c <_sbrk+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d207      	bcs.n	80006e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d4:	f001 ffda 	bl	800268c <__errno>
 80006d8:	4603      	mov	r3, r0
 80006da:	220c      	movs	r2, #12
 80006dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	e009      	b.n	80006f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ea:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <_sbrk+0x64>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	4a05      	ldr	r2, [pc, #20]	@ (8000708 <_sbrk+0x64>)
 80006f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20005000 	.word	0x20005000
 8000704:	00000400 	.word	0x00000400
 8000708:	200002ac 	.word	0x200002ac
 800070c:	20000568 	.word	0x20000568

08000710 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000738:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_TIM2_Init+0x94>)
 800073a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800073e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_TIM2_Init+0x94>)
 8000742:	2247      	movs	r2, #71	@ 0x47
 8000744:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_TIM2_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 386;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_TIM2_Init+0x94>)
 800074e:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8000752:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_TIM2_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_TIM2_Init+0x94>)
 800075c:	2280      	movs	r2, #128	@ 0x80
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000760:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <MX_TIM2_Init+0x94>)
 8000762:	f001 f953 	bl	8001a0c <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800076c:	f7ff ff17 	bl	800059e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000774:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <MX_TIM2_Init+0x94>)
 800077e:	f001 fad7 	bl	8001d30 <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000788:	f7ff ff09 	bl	800059e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_TIM2_Init+0x94>)
 800079a:	f001 fcb9 	bl	8002110 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007a4:	f7ff fefb 	bl	800059e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200002b0 	.word	0x200002b0

080007b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <MX_TIM3_Init+0x94>)
 80007d2:	4a1e      	ldr	r2, [pc, #120]	@ (800084c <MX_TIM3_Init+0x98>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <MX_TIM3_Init+0x94>)
 80007d8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80007dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007de:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <MX_TIM3_Init+0x94>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80007e4:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <MX_TIM3_Init+0x94>)
 80007e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80007ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_TIM3_Init+0x94>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_TIM3_Init+0x94>)
 80007f4:	2280      	movs	r2, #128	@ 0x80
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f8:	4813      	ldr	r0, [pc, #76]	@ (8000848 <MX_TIM3_Init+0x94>)
 80007fa:	f001 f907 	bl	8001a0c <HAL_TIM_Base_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000804:	f7ff fecb 	bl	800059e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4619      	mov	r1, r3
 8000814:	480c      	ldr	r0, [pc, #48]	@ (8000848 <MX_TIM3_Init+0x94>)
 8000816:	f001 fa8b 	bl	8001d30 <HAL_TIM_ConfigClockSource>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000820:	f7ff febd 	bl	800059e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_TIM3_Init+0x94>)
 8000832:	f001 fc6d 	bl	8002110 <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800083c:	f7ff feaf 	bl	800059e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200002f8 	.word	0x200002f8
 800084c:	40000400 	.word	0x40000400

08000850 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800086c:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <MX_TIM4_Init+0x94>)
 800086e:	4a1e      	ldr	r2, [pc, #120]	@ (80008e8 <MX_TIM4_Init+0x98>)
 8000870:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_TIM4_Init+0x94>)
 8000874:	2247      	movs	r2, #71	@ 0x47
 8000876:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_TIM4_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3860;
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_TIM4_Init+0x94>)
 8000880:	f640 7214 	movw	r2, #3860	@ 0xf14
 8000884:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_TIM4_Init+0x94>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_TIM4_Init+0x94>)
 800088e:	2280      	movs	r2, #128	@ 0x80
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000892:	4814      	ldr	r0, [pc, #80]	@ (80008e4 <MX_TIM4_Init+0x94>)
 8000894:	f001 f8ba 	bl	8001a0c <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800089e:	f7ff fe7e 	bl	800059e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	4619      	mov	r1, r3
 80008ae:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_TIM4_Init+0x94>)
 80008b0:	f001 fa3e 	bl	8001d30 <HAL_TIM_ConfigClockSource>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f7ff fe70 	bl	800059e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <MX_TIM4_Init+0x94>)
 80008cc:	f001 fc20 	bl	8002110 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80008d6:	f7ff fe62 	bl	800059e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000340 	.word	0x20000340
 80008e8:	40000800 	.word	0x40000800

080008ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008fc:	d114      	bne.n	8000928 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_TIM_Base_MspInit+0xac>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a25      	ldr	r2, [pc, #148]	@ (8000998 <HAL_TIM_Base_MspInit+0xac>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <HAL_TIM_Base_MspInit+0xac>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	201c      	movs	r0, #28
 800091c:	f000 fa79 	bl	8000e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000920:	201c      	movs	r0, #28
 8000922:	f000 fa92 	bl	8000e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000926:	e032      	b.n	800098e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a1b      	ldr	r2, [pc, #108]	@ (800099c <HAL_TIM_Base_MspInit+0xb0>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d114      	bne.n	800095c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <HAL_TIM_Base_MspInit+0xac>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a18      	ldr	r2, [pc, #96]	@ (8000998 <HAL_TIM_Base_MspInit+0xac>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <HAL_TIM_Base_MspInit+0xac>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	201d      	movs	r0, #29
 8000950:	f000 fa5f 	bl	8000e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000954:	201d      	movs	r0, #29
 8000956:	f000 fa78 	bl	8000e4a <HAL_NVIC_EnableIRQ>
}
 800095a:	e018      	b.n	800098e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <HAL_TIM_Base_MspInit+0xb4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d113      	bne.n	800098e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <HAL_TIM_Base_MspInit+0xac>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <HAL_TIM_Base_MspInit+0xac>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_TIM_Base_MspInit+0xac>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	201e      	movs	r0, #30
 8000984:	f000 fa45 	bl	8000e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000988:	201e      	movs	r0, #30
 800098a:	f000 fa5e 	bl	8000e4a <HAL_NVIC_EnableIRQ>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	40000400 	.word	0x40000400
 80009a0:	40000800 	.word	0x40000800

080009a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <MX_USART1_UART_Init+0x50>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009dc:	f001 fc08 	bl	80021f0 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009e6:	f7ff fdda 	bl	800059e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000388 	.word	0x20000388
 80009f4:	40013800 	.word	0x40013800

080009f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <MX_USART2_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f001 fbde 	bl	80021f0 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f7ff fdb0 	bl	800059e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200003d0 	.word	0x200003d0
 8000a48:	40004400 	.word	0x40004400

08000a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0318 	add.w	r3, r7, #24
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a37      	ldr	r2, [pc, #220]	@ (8000b44 <HAL_UART_MspInit+0xf8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d132      	bne.n	8000ad2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a6c:	4b36      	ldr	r3, [pc, #216]	@ (8000b48 <HAL_UART_MspInit+0xfc>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a35      	ldr	r2, [pc, #212]	@ (8000b48 <HAL_UART_MspInit+0xfc>)
 8000a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b33      	ldr	r3, [pc, #204]	@ (8000b48 <HAL_UART_MspInit+0xfc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b30      	ldr	r3, [pc, #192]	@ (8000b48 <HAL_UART_MspInit+0xfc>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a2f      	ldr	r2, [pc, #188]	@ (8000b48 <HAL_UART_MspInit+0xfc>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <HAL_UART_MspInit+0xfc>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0318 	add.w	r3, r7, #24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4826      	ldr	r0, [pc, #152]	@ (8000b4c <HAL_UART_MspInit+0x100>)
 8000ab2:	f000 f9e5 	bl	8000e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0318 	add.w	r3, r7, #24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4820      	ldr	r0, [pc, #128]	@ (8000b4c <HAL_UART_MspInit+0x100>)
 8000acc:	f000 f9d8 	bl	8000e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ad0:	e034      	b.n	8000b3c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b50 <HAL_UART_MspInit+0x104>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d12f      	bne.n	8000b3c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <HAL_UART_MspInit+0xfc>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	4a19      	ldr	r2, [pc, #100]	@ (8000b48 <HAL_UART_MspInit+0xfc>)
 8000ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae6:	61d3      	str	r3, [r2, #28]
 8000ae8:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <HAL_UART_MspInit+0xfc>)
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <HAL_UART_MspInit+0xfc>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a13      	ldr	r2, [pc, #76]	@ (8000b48 <HAL_UART_MspInit+0xfc>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_UART_MspInit+0xfc>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480b      	ldr	r0, [pc, #44]	@ (8000b4c <HAL_UART_MspInit+0x100>)
 8000b20:	f000 f9ae 	bl	8000e80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b24:	2308      	movs	r3, #8
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <HAL_UART_MspInit+0x100>)
 8000b38:	f000 f9a2 	bl	8000e80 <HAL_GPIO_Init>
}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	@ 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40013800 	.word	0x40013800
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	40004400 	.word	0x40004400

08000b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b54:	f7ff fddc 	bl	8000710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b5a:	490c      	ldr	r1, [pc, #48]	@ (8000b8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a09      	ldr	r2, [pc, #36]	@ (8000b94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b70:	4c09      	ldr	r4, [pc, #36]	@ (8000b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f001 fd8b 	bl	8002698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b82:	f7ff fca3 	bl	80004cc <main>
  bx lr
 8000b86:	4770      	bx	lr
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000b90:	08003028 	.word	0x08003028
  ldr r2, =_sbss
 8000b94:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000b98:	20000564 	.word	0x20000564

08000b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_2_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <HAL_Init+0x28>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	@ (8000bc8 <HAL_Init+0x28>)
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f923 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fcf6 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40022000 	.word	0x40022000

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f93b 	bl	8000e66 <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f903 	bl	8000e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000064 	.word	0x20000064
 8000c24:	2000006c 	.word	0x2000006c
 8000c28:	20000068 	.word	0x20000068

08000c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <HAL_IncTick+0x1c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a03      	ldr	r2, [pc, #12]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	2000006c 	.word	0x2000006c
 8000c4c:	20000418 	.word	0x20000418

08000c50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b02      	ldr	r3, [pc, #8]	@ (8000c60 <HAL_GetTick+0x10>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	20000418 	.word	0x20000418

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4906      	ldr	r1, [pc, #24]	@ (8000cfc <__NVIC_EnableIRQ+0x34>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	@ (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	@ 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	@ 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff ff90 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff2d 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff42 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff90 	bl	8000d54 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5f 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff35 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffa2 	bl	8000db8 <SysTick_Config>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b08b      	sub	sp, #44	@ 0x2c
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e92:	e169      	b.n	8001168 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e94:	2201      	movs	r2, #1
 8000e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 8158 	bne.w	8001162 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4a9a      	ldr	r2, [pc, #616]	@ (8001120 <HAL_GPIO_Init+0x2a0>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d05e      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000ebc:	4a98      	ldr	r2, [pc, #608]	@ (8001120 <HAL_GPIO_Init+0x2a0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d875      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000ec2:	4a98      	ldr	r2, [pc, #608]	@ (8001124 <HAL_GPIO_Init+0x2a4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d058      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000ec8:	4a96      	ldr	r2, [pc, #600]	@ (8001124 <HAL_GPIO_Init+0x2a4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d86f      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000ece:	4a96      	ldr	r2, [pc, #600]	@ (8001128 <HAL_GPIO_Init+0x2a8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d052      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000ed4:	4a94      	ldr	r2, [pc, #592]	@ (8001128 <HAL_GPIO_Init+0x2a8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d869      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000eda:	4a94      	ldr	r2, [pc, #592]	@ (800112c <HAL_GPIO_Init+0x2ac>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d04c      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000ee0:	4a92      	ldr	r2, [pc, #584]	@ (800112c <HAL_GPIO_Init+0x2ac>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d863      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000ee6:	4a92      	ldr	r2, [pc, #584]	@ (8001130 <HAL_GPIO_Init+0x2b0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d046      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
 8000eec:	4a90      	ldr	r2, [pc, #576]	@ (8001130 <HAL_GPIO_Init+0x2b0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d85d      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000ef2:	2b12      	cmp	r3, #18
 8000ef4:	d82a      	bhi.n	8000f4c <HAL_GPIO_Init+0xcc>
 8000ef6:	2b12      	cmp	r3, #18
 8000ef8:	d859      	bhi.n	8000fae <HAL_GPIO_Init+0x12e>
 8000efa:	a201      	add	r2, pc, #4	@ (adr r2, 8000f00 <HAL_GPIO_Init+0x80>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f7b 	.word	0x08000f7b
 8000f04:	08000f55 	.word	0x08000f55
 8000f08:	08000f67 	.word	0x08000f67
 8000f0c:	08000fa9 	.word	0x08000fa9
 8000f10:	08000faf 	.word	0x08000faf
 8000f14:	08000faf 	.word	0x08000faf
 8000f18:	08000faf 	.word	0x08000faf
 8000f1c:	08000faf 	.word	0x08000faf
 8000f20:	08000faf 	.word	0x08000faf
 8000f24:	08000faf 	.word	0x08000faf
 8000f28:	08000faf 	.word	0x08000faf
 8000f2c:	08000faf 	.word	0x08000faf
 8000f30:	08000faf 	.word	0x08000faf
 8000f34:	08000faf 	.word	0x08000faf
 8000f38:	08000faf 	.word	0x08000faf
 8000f3c:	08000faf 	.word	0x08000faf
 8000f40:	08000faf 	.word	0x08000faf
 8000f44:	08000f5d 	.word	0x08000f5d
 8000f48:	08000f71 	.word	0x08000f71
 8000f4c:	4a79      	ldr	r2, [pc, #484]	@ (8001134 <HAL_GPIO_Init+0x2b4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f52:	e02c      	b.n	8000fae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	623b      	str	r3, [r7, #32]
          break;
 8000f5a:	e029      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	3304      	adds	r3, #4
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e024      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	623b      	str	r3, [r7, #32]
          break;
 8000f6e:	e01f      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	330c      	adds	r3, #12
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	e01a      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d102      	bne.n	8000f88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f82:	2304      	movs	r3, #4
 8000f84:	623b      	str	r3, [r7, #32]
          break;
 8000f86:	e013      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d105      	bne.n	8000f9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f90:	2308      	movs	r3, #8
 8000f92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	611a      	str	r2, [r3, #16]
          break;
 8000f9a:	e009      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	615a      	str	r2, [r3, #20]
          break;
 8000fa6:	e003      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
          break;
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x130>
          break;
 8000fae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2bff      	cmp	r3, #255	@ 0xff
 8000fb4:	d801      	bhi.n	8000fba <HAL_GPIO_Init+0x13a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	e001      	b.n	8000fbe <HAL_GPIO_Init+0x13e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2bff      	cmp	r3, #255	@ 0xff
 8000fc4:	d802      	bhi.n	8000fcc <HAL_GPIO_Init+0x14c>
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	e002      	b.n	8000fd2 <HAL_GPIO_Init+0x152>
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fce:	3b08      	subs	r3, #8
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	210f      	movs	r1, #15
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	6a39      	ldr	r1, [r7, #32]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	431a      	orrs	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80b1 	beq.w	8001162 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001000:	4b4d      	ldr	r3, [pc, #308]	@ (8001138 <HAL_GPIO_Init+0x2b8>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a4c      	ldr	r2, [pc, #304]	@ (8001138 <HAL_GPIO_Init+0x2b8>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b4a      	ldr	r3, [pc, #296]	@ (8001138 <HAL_GPIO_Init+0x2b8>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001018:	4a48      	ldr	r2, [pc, #288]	@ (800113c <HAL_GPIO_Init+0x2bc>)
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a40      	ldr	r2, [pc, #256]	@ (8001140 <HAL_GPIO_Init+0x2c0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d013      	beq.n	800106c <HAL_GPIO_Init+0x1ec>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a3f      	ldr	r2, [pc, #252]	@ (8001144 <HAL_GPIO_Init+0x2c4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d00d      	beq.n	8001068 <HAL_GPIO_Init+0x1e8>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a3e      	ldr	r2, [pc, #248]	@ (8001148 <HAL_GPIO_Init+0x2c8>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d007      	beq.n	8001064 <HAL_GPIO_Init+0x1e4>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a3d      	ldr	r2, [pc, #244]	@ (800114c <HAL_GPIO_Init+0x2cc>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d101      	bne.n	8001060 <HAL_GPIO_Init+0x1e0>
 800105c:	2303      	movs	r3, #3
 800105e:	e006      	b.n	800106e <HAL_GPIO_Init+0x1ee>
 8001060:	2304      	movs	r3, #4
 8001062:	e004      	b.n	800106e <HAL_GPIO_Init+0x1ee>
 8001064:	2302      	movs	r3, #2
 8001066:	e002      	b.n	800106e <HAL_GPIO_Init+0x1ee>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_GPIO_Init+0x1ee>
 800106c:	2300      	movs	r3, #0
 800106e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001070:	f002 0203 	and.w	r2, r2, #3
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	4093      	lsls	r3, r2
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800107e:	492f      	ldr	r1, [pc, #188]	@ (800113c <HAL_GPIO_Init+0x2bc>)
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001098:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	492c      	ldr	r1, [pc, #176]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	608b      	str	r3, [r1, #8]
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	4928      	ldr	r1, [pc, #160]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c0:	4b23      	ldr	r3, [pc, #140]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	4922      	ldr	r1, [pc, #136]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	60cb      	str	r3, [r1, #12]
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ce:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	491e      	ldr	r1, [pc, #120]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010d8:	4013      	ands	r3, r2
 80010da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010e8:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4918      	ldr	r1, [pc, #96]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	4914      	ldr	r1, [pc, #80]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 8001100:	4013      	ands	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d021      	beq.n	8001154 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	490e      	ldr	r1, [pc, #56]	@ (8001150 <HAL_GPIO_Init+0x2d0>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	600b      	str	r3, [r1, #0]
 800111c:	e021      	b.n	8001162 <HAL_GPIO_Init+0x2e2>
 800111e:	bf00      	nop
 8001120:	10320000 	.word	0x10320000
 8001124:	10310000 	.word	0x10310000
 8001128:	10220000 	.word	0x10220000
 800112c:	10210000 	.word	0x10210000
 8001130:	10120000 	.word	0x10120000
 8001134:	10110000 	.word	0x10110000
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000
 8001140:	40010800 	.word	0x40010800
 8001144:	40010c00 	.word	0x40010c00
 8001148:	40011000 	.word	0x40011000
 800114c:	40011400 	.word	0x40011400
 8001150:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <HAL_GPIO_Init+0x304>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	43db      	mvns	r3, r3
 800115c:	4909      	ldr	r1, [pc, #36]	@ (8001184 <HAL_GPIO_Init+0x304>)
 800115e:	4013      	ands	r3, r2
 8001160:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001164:	3301      	adds	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116e:	fa22 f303 	lsr.w	r3, r2, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	f47f ae8e 	bne.w	8000e94 <HAL_GPIO_Init+0x14>
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	372c      	adds	r7, #44	@ 0x2c
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011a4:	e003      	b.n	80011ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	041a      	lsls	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	611a      	str	r2, [r3, #16]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4013      	ands	r3, r2
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43d9      	mvns	r1, r3
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	400b      	ands	r3, r1
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e272      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8087 	beq.w	800131a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800120c:	4b92      	ldr	r3, [pc, #584]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b04      	cmp	r3, #4
 8001216:	d00c      	beq.n	8001232 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001218:	4b8f      	ldr	r3, [pc, #572]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b08      	cmp	r3, #8
 8001222:	d112      	bne.n	800124a <HAL_RCC_OscConfig+0x5e>
 8001224:	4b8c      	ldr	r3, [pc, #560]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001230:	d10b      	bne.n	800124a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001232:	4b89      	ldr	r3, [pc, #548]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d06c      	beq.n	8001318 <HAL_RCC_OscConfig+0x12c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d168      	bne.n	8001318 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e24c      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001252:	d106      	bne.n	8001262 <HAL_RCC_OscConfig+0x76>
 8001254:	4b80      	ldr	r3, [pc, #512]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a7f      	ldr	r2, [pc, #508]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 800125a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e02e      	b.n	80012c0 <HAL_RCC_OscConfig+0xd4>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x98>
 800126a:	4b7b      	ldr	r3, [pc, #492]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7a      	ldr	r2, [pc, #488]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b78      	ldr	r3, [pc, #480]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a77      	ldr	r2, [pc, #476]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 800127c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e01d      	b.n	80012c0 <HAL_RCC_OscConfig+0xd4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0xbc>
 800128e:	4b72      	ldr	r3, [pc, #456]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a71      	ldr	r2, [pc, #452]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b6f      	ldr	r3, [pc, #444]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a6e      	ldr	r2, [pc, #440]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0xd4>
 80012a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a6a      	ldr	r2, [pc, #424]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b68      	ldr	r3, [pc, #416]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a67      	ldr	r2, [pc, #412]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fcc2 	bl	8000c50 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fcbe 	bl	8000c50 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	@ 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e200      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0xe4>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fcae 	bl	8000c50 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fcaa 	bl	8000c50 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	@ 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1ec      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	4b53      	ldr	r3, [pc, #332]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x10c>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d063      	beq.n	80013ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001326:	4b4c      	ldr	r3, [pc, #304]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001332:	4b49      	ldr	r3, [pc, #292]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b08      	cmp	r3, #8
 800133c:	d11c      	bne.n	8001378 <HAL_RCC_OscConfig+0x18c>
 800133e:	4b46      	ldr	r3, [pc, #280]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d116      	bne.n	8001378 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	4b43      	ldr	r3, [pc, #268]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_RCC_OscConfig+0x176>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e1c0      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b3d      	ldr	r3, [pc, #244]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4939      	ldr	r1, [pc, #228]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	e03a      	b.n	80013ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001380:	4b36      	ldr	r3, [pc, #216]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff fc63 	bl	8000c50 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff fc5f 	bl	8000c50 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e1a1      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4927      	ldr	r1, [pc, #156]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
 80013c0:	e015      	b.n	80013ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	4b26      	ldr	r3, [pc, #152]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fc42 	bl	8000c50 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc3e 	bl	8000c50 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e180      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d03a      	beq.n	8001470 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d019      	beq.n	8001436 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001402:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <HAL_RCC_OscConfig+0x274>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001408:	f7ff fc22 	bl	8000c50 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001410:	f7ff fc1e 	bl	8000c50 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e160      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f000 face 	bl	80019d0 <RCC_Delay>
 8001434:	e01c      	b.n	8001470 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <HAL_RCC_OscConfig+0x274>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff fc08 	bl	8000c50 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001442:	e00f      	b.n	8001464 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fc04 	bl	8000c50 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d908      	bls.n	8001464 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e146      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	42420000 	.word	0x42420000
 8001460:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	4b92      	ldr	r3, [pc, #584]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1e9      	bne.n	8001444 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80a6 	beq.w	80015ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001482:	4b8b      	ldr	r3, [pc, #556]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10d      	bne.n	80014aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b88      	ldr	r3, [pc, #544]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a87      	ldr	r2, [pc, #540]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b85      	ldr	r3, [pc, #532]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a6:	2301      	movs	r3, #1
 80014a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b82      	ldr	r3, [pc, #520]	@ (80016b4 <HAL_RCC_OscConfig+0x4c8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d118      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b6:	4b7f      	ldr	r3, [pc, #508]	@ (80016b4 <HAL_RCC_OscConfig+0x4c8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a7e      	ldr	r2, [pc, #504]	@ (80016b4 <HAL_RCC_OscConfig+0x4c8>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fbc5 	bl	8000c50 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ca:	f7ff fbc1 	bl	8000c50 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b64      	cmp	r3, #100	@ 0x64
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e103      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	4b75      	ldr	r3, [pc, #468]	@ (80016b4 <HAL_RCC_OscConfig+0x4c8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x312>
 80014f0:	4b6f      	ldr	r3, [pc, #444]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a6e      	ldr	r2, [pc, #440]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6213      	str	r3, [r2, #32]
 80014fc:	e02d      	b.n	800155a <HAL_RCC_OscConfig+0x36e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x334>
 8001506:	4b6a      	ldr	r3, [pc, #424]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4a69      	ldr	r2, [pc, #420]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6213      	str	r3, [r2, #32]
 8001512:	4b67      	ldr	r3, [pc, #412]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a66      	ldr	r2, [pc, #408]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	6213      	str	r3, [r2, #32]
 800151e:	e01c      	b.n	800155a <HAL_RCC_OscConfig+0x36e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d10c      	bne.n	8001542 <HAL_RCC_OscConfig+0x356>
 8001528:	4b61      	ldr	r3, [pc, #388]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a60      	ldr	r2, [pc, #384]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	4b5e      	ldr	r3, [pc, #376]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4a5d      	ldr	r2, [pc, #372]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6213      	str	r3, [r2, #32]
 8001540:	e00b      	b.n	800155a <HAL_RCC_OscConfig+0x36e>
 8001542:	4b5b      	ldr	r3, [pc, #364]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a5a      	ldr	r2, [pc, #360]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	4b58      	ldr	r3, [pc, #352]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a57      	ldr	r2, [pc, #348]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d015      	beq.n	800158e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fb75 	bl	8000c50 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff fb71 	bl	8000c50 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0b1      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	4b4b      	ldr	r3, [pc, #300]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0ee      	beq.n	800156a <HAL_RCC_OscConfig+0x37e>
 800158c:	e014      	b.n	80015b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff fb5f 	bl	8000c50 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fb5b 	bl	8000c50 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e09b      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	4b40      	ldr	r3, [pc, #256]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ee      	bne.n	8001596 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d105      	bne.n	80015ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015be:	4b3c      	ldr	r3, [pc, #240]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a3b      	ldr	r2, [pc, #236]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8087 	beq.w	80016e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d4:	4b36      	ldr	r3, [pc, #216]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d061      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d146      	bne.n	8001676 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e8:	4b33      	ldr	r3, [pc, #204]	@ (80016b8 <HAL_RCC_OscConfig+0x4cc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb2f 	bl	8000c50 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff fb2b 	bl	8000c50 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e06d      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001608:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800161c:	d108      	bne.n	8001630 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800161e:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	4921      	ldr	r1, [pc, #132]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001630:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a19      	ldr	r1, [r3, #32]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001640:	430b      	orrs	r3, r1
 8001642:	491b      	ldr	r1, [pc, #108]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <HAL_RCC_OscConfig+0x4cc>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff faff 	bl	8000c50 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fafb 	bl	8000c50 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e03d      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x46a>
 8001674:	e035      	b.n	80016e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <HAL_RCC_OscConfig+0x4cc>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fae8 	bl	8000c50 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fae4 	bl	8000c50 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e026      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001696:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x498>
 80016a2:	e01e      	b.n	80016e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e019      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40007000 	.word	0x40007000
 80016b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <HAL_RCC_OscConfig+0x500>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0d0      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b6a      	ldr	r3, [pc, #424]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d910      	bls.n	8001734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b67      	ldr	r3, [pc, #412]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 0207 	bic.w	r2, r3, #7
 800171a:	4965      	ldr	r1, [pc, #404]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b63      	ldr	r3, [pc, #396]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b8      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800174c:	4b59      	ldr	r3, [pc, #356]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a58      	ldr	r2, [pc, #352]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001756:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001764:	4b53      	ldr	r3, [pc, #332]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a52      	ldr	r2, [pc, #328]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800176e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b50      	ldr	r3, [pc, #320]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	494d      	ldr	r1, [pc, #308]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d040      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b41      	ldr	r3, [pc, #260]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e073      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b3d      	ldr	r3, [pc, #244]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e06b      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b39      	ldr	r3, [pc, #228]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4936      	ldr	r1, [pc, #216]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fa36 	bl	8000c50 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fa32 	bl	8000c50 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e053      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2d      	ldr	r3, [pc, #180]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d210      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 0207 	bic.w	r2, r3, #7
 8001826:	4922      	ldr	r1, [pc, #136]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b20      	ldr	r3, [pc, #128]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e032      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4916      	ldr	r1, [pc, #88]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800186a:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	490e      	ldr	r1, [pc, #56]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800187e:	f000 f821 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	490a      	ldr	r1, [pc, #40]	@ (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	4a09      	ldr	r2, [pc, #36]	@ (80018bc <HAL_RCC_ClockConfig+0x1cc>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <HAL_RCC_ClockConfig+0x1d0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f994 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40022000 	.word	0x40022000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	08002fb8 	.word	0x08002fb8
 80018bc:	20000064 	.word	0x20000064
 80018c0:	20000068 	.word	0x20000068

080018c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018de:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x94>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x30>
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x36>
 80018f2:	e027      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <HAL_RCC_GetSysClockFreq+0x98>)
 80018f6:	613b      	str	r3, [r7, #16]
      break;
 80018f8:	e027      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	0c9b      	lsrs	r3, r3, #18
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	4a17      	ldr	r2, [pc, #92]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001904:	5cd3      	ldrb	r3, [r2, r3]
 8001906:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d010      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001912:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x94>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	0c5b      	lsrs	r3, r3, #17
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	4a11      	ldr	r2, [pc, #68]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xa0>)
 800191e:	5cd3      	ldrb	r3, [r2, r3]
 8001920:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <HAL_RCC_GetSysClockFreq+0x98>)
 8001926:	fb03 f202 	mul.w	r2, r3, r2
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e004      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a0c      	ldr	r2, [pc, #48]	@ (8001968 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	613b      	str	r3, [r7, #16]
      break;
 8001942:	e002      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_RCC_GetSysClockFreq+0x98>)
 8001946:	613b      	str	r3, [r7, #16]
      break;
 8001948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800194a:	693b      	ldr	r3, [r7, #16]
}
 800194c:	4618      	mov	r0, r3
 800194e:	371c      	adds	r7, #28
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	007a1200 	.word	0x007a1200
 8001960:	08002fd0 	.word	0x08002fd0
 8001964:	08002fe0 	.word	0x08002fe0
 8001968:	003d0900 	.word	0x003d0900

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b02      	ldr	r3, [pc, #8]	@ (800197c <HAL_RCC_GetHCLKFreq+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	20000064 	.word	0x20000064

08001980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001984:	f7ff fff2 	bl	800196c <HAL_RCC_GetHCLKFreq>
 8001988:	4602      	mov	r2, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4903      	ldr	r1, [pc, #12]	@ (80019a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001996:	5ccb      	ldrb	r3, [r1, r3]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	08002fc8 	.word	0x08002fc8

080019a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019ac:	f7ff ffde 	bl	800196c <HAL_RCC_GetHCLKFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	0adb      	lsrs	r3, r3, #11
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	4903      	ldr	r1, [pc, #12]	@ (80019cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	08002fc8 	.word	0x08002fc8

080019d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <RCC_Delay+0x34>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <RCC_Delay+0x38>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	0a5b      	lsrs	r3, r3, #9
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019ec:	bf00      	nop
  }
  while (Delay --);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	1e5a      	subs	r2, r3, #1
 80019f2:	60fa      	str	r2, [r7, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f9      	bne.n	80019ec <RCC_Delay+0x1c>
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000064 	.word	0x20000064
 8001a08:	10624dd3 	.word	0x10624dd3

08001a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e041      	b.n	8001aa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d106      	bne.n	8001a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7fe ff5a 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3304      	adds	r3, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f000 fa5c 	bl	8001f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d001      	beq.n	8001ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e03a      	b.n	8001b3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a18      	ldr	r2, [pc, #96]	@ (8001b44 <HAL_TIM_Base_Start_IT+0x98>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00e      	beq.n	8001b04 <HAL_TIM_Base_Start_IT+0x58>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aee:	d009      	beq.n	8001b04 <HAL_TIM_Base_Start_IT+0x58>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a14      	ldr	r2, [pc, #80]	@ (8001b48 <HAL_TIM_Base_Start_IT+0x9c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d004      	beq.n	8001b04 <HAL_TIM_Base_Start_IT+0x58>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a13      	ldr	r2, [pc, #76]	@ (8001b4c <HAL_TIM_Base_Start_IT+0xa0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d111      	bne.n	8001b28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d010      	beq.n	8001b38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b26:	e007      	b.n	8001b38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	40012c00 	.word	0x40012c00
 8001b48:	40000400 	.word	0x40000400
 8001b4c:	40000800 	.word	0x40000800

08001b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d020      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01b      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0202 	mvn.w	r2, #2
 8001b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f998 	bl	8001ed0 <HAL_TIM_IC_CaptureCallback>
 8001ba0:	e005      	b.n	8001bae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f98b 	bl	8001ebe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f99a 	bl	8001ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d020      	beq.n	8001c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d01b      	beq.n	8001c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0204 	mvn.w	r2, #4
 8001bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f972 	bl	8001ed0 <HAL_TIM_IC_CaptureCallback>
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f965 	bl	8001ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f974 	bl	8001ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d020      	beq.n	8001c4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01b      	beq.n	8001c4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0208 	mvn.w	r2, #8
 8001c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2204      	movs	r2, #4
 8001c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f94c 	bl	8001ed0 <HAL_TIM_IC_CaptureCallback>
 8001c38:	e005      	b.n	8001c46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f93f 	bl	8001ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f94e 	bl	8001ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d020      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01b      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0210 	mvn.w	r2, #16
 8001c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2208      	movs	r2, #8
 8001c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f926 	bl	8001ed0 <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f919 	bl	8001ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f928 	bl	8001ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00c      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0201 	mvn.w	r2, #1
 8001cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe fbae 	bl	8000418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fa7f 	bl	80021de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00c      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8f8 	bl	8001ef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0220 	mvn.w	r2, #32
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fa52 	bl	80021cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_TIM_ConfigClockSource+0x1c>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e0b4      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x186>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d84:	d03e      	beq.n	8001e04 <HAL_TIM_ConfigClockSource+0xd4>
 8001d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d8a:	f200 8087 	bhi.w	8001e9c <HAL_TIM_ConfigClockSource+0x16c>
 8001d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d92:	f000 8086 	beq.w	8001ea2 <HAL_TIM_ConfigClockSource+0x172>
 8001d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d9a:	d87f      	bhi.n	8001e9c <HAL_TIM_ConfigClockSource+0x16c>
 8001d9c:	2b70      	cmp	r3, #112	@ 0x70
 8001d9e:	d01a      	beq.n	8001dd6 <HAL_TIM_ConfigClockSource+0xa6>
 8001da0:	2b70      	cmp	r3, #112	@ 0x70
 8001da2:	d87b      	bhi.n	8001e9c <HAL_TIM_ConfigClockSource+0x16c>
 8001da4:	2b60      	cmp	r3, #96	@ 0x60
 8001da6:	d050      	beq.n	8001e4a <HAL_TIM_ConfigClockSource+0x11a>
 8001da8:	2b60      	cmp	r3, #96	@ 0x60
 8001daa:	d877      	bhi.n	8001e9c <HAL_TIM_ConfigClockSource+0x16c>
 8001dac:	2b50      	cmp	r3, #80	@ 0x50
 8001dae:	d03c      	beq.n	8001e2a <HAL_TIM_ConfigClockSource+0xfa>
 8001db0:	2b50      	cmp	r3, #80	@ 0x50
 8001db2:	d873      	bhi.n	8001e9c <HAL_TIM_ConfigClockSource+0x16c>
 8001db4:	2b40      	cmp	r3, #64	@ 0x40
 8001db6:	d058      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x13a>
 8001db8:	2b40      	cmp	r3, #64	@ 0x40
 8001dba:	d86f      	bhi.n	8001e9c <HAL_TIM_ConfigClockSource+0x16c>
 8001dbc:	2b30      	cmp	r3, #48	@ 0x30
 8001dbe:	d064      	beq.n	8001e8a <HAL_TIM_ConfigClockSource+0x15a>
 8001dc0:	2b30      	cmp	r3, #48	@ 0x30
 8001dc2:	d86b      	bhi.n	8001e9c <HAL_TIM_ConfigClockSource+0x16c>
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	d060      	beq.n	8001e8a <HAL_TIM_ConfigClockSource+0x15a>
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	d867      	bhi.n	8001e9c <HAL_TIM_ConfigClockSource+0x16c>
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d05c      	beq.n	8001e8a <HAL_TIM_ConfigClockSource+0x15a>
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d05a      	beq.n	8001e8a <HAL_TIM_ConfigClockSource+0x15a>
 8001dd4:	e062      	b.n	8001e9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001de6:	f000 f974 	bl	80020d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001df8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	609a      	str	r2, [r3, #8]
      break;
 8001e02:	e04f      	b.n	8001ea4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e14:	f000 f95d 	bl	80020d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e26:	609a      	str	r2, [r3, #8]
      break;
 8001e28:	e03c      	b.n	8001ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e36:	461a      	mov	r2, r3
 8001e38:	f000 f8d4 	bl	8001fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2150      	movs	r1, #80	@ 0x50
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f92b 	bl	800209e <TIM_ITRx_SetConfig>
      break;
 8001e48:	e02c      	b.n	8001ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e56:	461a      	mov	r2, r3
 8001e58:	f000 f8f2 	bl	8002040 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2160      	movs	r1, #96	@ 0x60
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f91b 	bl	800209e <TIM_ITRx_SetConfig>
      break;
 8001e68:	e01c      	b.n	8001ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e76:	461a      	mov	r2, r3
 8001e78:	f000 f8b4 	bl	8001fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2140      	movs	r1, #64	@ 0x40
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f90b 	bl	800209e <TIM_ITRx_SetConfig>
      break;
 8001e88:	e00c      	b.n	8001ea4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4619      	mov	r1, r3
 8001e94:	4610      	mov	r0, r2
 8001e96:	f000 f902 	bl	800209e <TIM_ITRx_SetConfig>
      break;
 8001e9a:	e003      	b.n	8001ea4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea0:	e000      	b.n	8001ea4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
	...

08001f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd8 <TIM_Base_SetConfig+0xd0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00b      	beq.n	8001f38 <TIM_Base_SetConfig+0x30>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f26:	d007      	beq.n	8001f38 <TIM_Base_SetConfig+0x30>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001fdc <TIM_Base_SetConfig+0xd4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d003      	beq.n	8001f38 <TIM_Base_SetConfig+0x30>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe0 <TIM_Base_SetConfig+0xd8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d108      	bne.n	8001f4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a22      	ldr	r2, [pc, #136]	@ (8001fd8 <TIM_Base_SetConfig+0xd0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00b      	beq.n	8001f6a <TIM_Base_SetConfig+0x62>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f58:	d007      	beq.n	8001f6a <TIM_Base_SetConfig+0x62>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fdc <TIM_Base_SetConfig+0xd4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d003      	beq.n	8001f6a <TIM_Base_SetConfig+0x62>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe0 <TIM_Base_SetConfig+0xd8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d108      	bne.n	8001f7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd8 <TIM_Base_SetConfig+0xd0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d103      	bne.n	8001fb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f023 0201 	bic.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	611a      	str	r2, [r3, #16]
  }
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	40012c00 	.word	0x40012c00
 8001fdc:	40000400 	.word	0x40000400
 8001fe0:	40000800 	.word	0x40000800

08001fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f023 0201 	bic.w	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800200e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f023 030a 	bic.w	r3, r3, #10
 8002020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4313      	orrs	r3, r2
 8002028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	621a      	str	r2, [r3, #32]
}
 8002036:	bf00      	nop
 8002038:	371c      	adds	r7, #28
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	f023 0210 	bic.w	r2, r3, #16
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800206a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	031b      	lsls	r3, r3, #12
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800207c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	621a      	str	r2, [r3, #32]
}
 8002094:	bf00      	nop
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f043 0307 	orr.w	r3, r3, #7
 80020c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	609a      	str	r2, [r3, #8]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b087      	sub	sp, #28
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	021a      	lsls	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	609a      	str	r2, [r3, #8]
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002124:	2302      	movs	r3, #2
 8002126:	e046      	b.n	80021b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800214e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a16      	ldr	r2, [pc, #88]	@ (80021c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00e      	beq.n	800218a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002174:	d009      	beq.n	800218a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a12      	ldr	r2, [pc, #72]	@ (80021c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d004      	beq.n	800218a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a10      	ldr	r2, [pc, #64]	@ (80021c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d10c      	bne.n	80021a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	4313      	orrs	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	40012c00 	.word	0x40012c00
 80021c4:	40000400 	.word	0x40000400
 80021c8:	40000800 	.word	0x40000800

080021cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e042      	b.n	8002288 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fc18 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2224      	movs	r2, #36	@ 0x24
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f971 	bl	800251c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695a      	ldr	r2, [r3, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d175      	bne.n	800239c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_UART_Transmit+0x2c>
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e06e      	b.n	800239e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2221      	movs	r2, #33	@ 0x21
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ce:	f7fe fcbf 	bl	8000c50 <HAL_GetTick>
 80022d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	88fa      	ldrh	r2, [r7, #6]
 80022d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	88fa      	ldrh	r2, [r7, #6]
 80022de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022e8:	d108      	bne.n	80022fc <HAL_UART_Transmit+0x6c>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d104      	bne.n	80022fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	e003      	b.n	8002304 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002304:	e02e      	b.n	8002364 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	2180      	movs	r1, #128	@ 0x80
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 f848 	bl	80023a6 <UART_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e03a      	b.n	800239e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10b      	bne.n	8002346 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800233c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	3302      	adds	r3, #2
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	e007      	b.n	8002356 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	3301      	adds	r3, #1
 8002354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1cb      	bne.n	8002306 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2200      	movs	r2, #0
 8002376:	2140      	movs	r1, #64	@ 0x40
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f814 	bl	80023a6 <UART_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e006      	b.n	800239e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b6:	e03b      	b.n	8002430 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d037      	beq.n	8002430 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c0:	f7fe fc46 	bl	8000c50 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	6a3a      	ldr	r2, [r7, #32]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d302      	bcc.n	80023d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e03a      	b.n	8002450 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d023      	beq.n	8002430 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b80      	cmp	r3, #128	@ 0x80
 80023ec:	d020      	beq.n	8002430 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b40      	cmp	r3, #64	@ 0x40
 80023f2:	d01d      	beq.n	8002430 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d116      	bne.n	8002430 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f81d 	bl	8002458 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2208      	movs	r2, #8
 8002422:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e00f      	b.n	8002450 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4013      	ands	r3, r2
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	429a      	cmp	r2, r3
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	429a      	cmp	r2, r3
 800244c:	d0b4      	beq.n	80023b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002458:	b480      	push	{r7}
 800245a:	b095      	sub	sp, #84	@ 0x54
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	330c      	adds	r3, #12
 8002466:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800246a:	e853 3f00 	ldrex	r3, [r3]
 800246e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	330c      	adds	r3, #12
 800247e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002480:	643a      	str	r2, [r7, #64]	@ 0x40
 8002482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002484:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002488:	e841 2300 	strex	r3, r2, [r1]
 800248c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e5      	bne.n	8002460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3314      	adds	r3, #20
 800249a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	e853 3f00 	ldrex	r3, [r3]
 80024a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3314      	adds	r3, #20
 80024b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024bc:	e841 2300 	strex	r3, r2, [r1]
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e5      	bne.n	8002494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d119      	bne.n	8002504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	330c      	adds	r3, #12
 80024d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	e853 3f00 	ldrex	r3, [r3]
 80024de:	60bb      	str	r3, [r7, #8]
   return(result);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f023 0310 	bic.w	r3, r3, #16
 80024e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	330c      	adds	r3, #12
 80024ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024f0:	61ba      	str	r2, [r7, #24]
 80024f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f4:	6979      	ldr	r1, [r7, #20]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	e841 2300 	strex	r3, r2, [r1]
 80024fc:	613b      	str	r3, [r7, #16]
   return(result);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e5      	bne.n	80024d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002512:	bf00      	nop
 8002514:	3754      	adds	r7, #84	@ 0x54
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002556:	f023 030c 	bic.w	r3, r3, #12
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	430b      	orrs	r3, r1
 8002562:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2c      	ldr	r2, [pc, #176]	@ (8002630 <UART_SetConfig+0x114>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d103      	bne.n	800258c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002584:	f7ff fa10 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	e002      	b.n	8002592 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800258c:	f7ff f9f8 	bl	8001980 <HAL_RCC_GetPCLK1Freq>
 8002590:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	009a      	lsls	r2, r3, #2
 800259c:	441a      	add	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	4a22      	ldr	r2, [pc, #136]	@ (8002634 <UART_SetConfig+0x118>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	0119      	lsls	r1, r3, #4
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	009a      	lsls	r2, r3, #2
 80025bc:	441a      	add	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002634 <UART_SetConfig+0x118>)
 80025ca:	fba3 0302 	umull	r0, r3, r3, r2
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2064      	movs	r0, #100	@ 0x64
 80025d2:	fb00 f303 	mul.w	r3, r0, r3
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	3332      	adds	r3, #50	@ 0x32
 80025dc:	4a15      	ldr	r2, [pc, #84]	@ (8002634 <UART_SetConfig+0x118>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025e8:	4419      	add	r1, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	009a      	lsls	r2, r3, #2
 80025f4:	441a      	add	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002600:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <UART_SetConfig+0x118>)
 8002602:	fba3 0302 	umull	r0, r3, r3, r2
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2064      	movs	r0, #100	@ 0x64
 800260a:	fb00 f303 	mul.w	r3, r0, r3
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	3332      	adds	r3, #50	@ 0x32
 8002614:	4a07      	ldr	r2, [pc, #28]	@ (8002634 <UART_SetConfig+0x118>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	f003 020f 	and.w	r2, r3, #15
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	440a      	add	r2, r1
 8002626:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40013800 	.word	0x40013800
 8002634:	51eb851f 	.word	0x51eb851f

08002638 <siprintf>:
 8002638:	b40e      	push	{r1, r2, r3}
 800263a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800263e:	b510      	push	{r4, lr}
 8002640:	2400      	movs	r4, #0
 8002642:	b09d      	sub	sp, #116	@ 0x74
 8002644:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002646:	9002      	str	r0, [sp, #8]
 8002648:	9006      	str	r0, [sp, #24]
 800264a:	9107      	str	r1, [sp, #28]
 800264c:	9104      	str	r1, [sp, #16]
 800264e:	4809      	ldr	r0, [pc, #36]	@ (8002674 <siprintf+0x3c>)
 8002650:	4909      	ldr	r1, [pc, #36]	@ (8002678 <siprintf+0x40>)
 8002652:	f853 2b04 	ldr.w	r2, [r3], #4
 8002656:	9105      	str	r1, [sp, #20]
 8002658:	6800      	ldr	r0, [r0, #0]
 800265a:	a902      	add	r1, sp, #8
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002660:	f000 f992 	bl	8002988 <_svfiprintf_r>
 8002664:	9b02      	ldr	r3, [sp, #8]
 8002666:	701c      	strb	r4, [r3, #0]
 8002668:	b01d      	add	sp, #116	@ 0x74
 800266a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800266e:	b003      	add	sp, #12
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000070 	.word	0x20000070
 8002678:	ffff0208 	.word	0xffff0208

0800267c <memset>:
 800267c:	4603      	mov	r3, r0
 800267e:	4402      	add	r2, r0
 8002680:	4293      	cmp	r3, r2
 8002682:	d100      	bne.n	8002686 <memset+0xa>
 8002684:	4770      	bx	lr
 8002686:	f803 1b01 	strb.w	r1, [r3], #1
 800268a:	e7f9      	b.n	8002680 <memset+0x4>

0800268c <__errno>:
 800268c:	4b01      	ldr	r3, [pc, #4]	@ (8002694 <__errno+0x8>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000070 	.word	0x20000070

08002698 <__libc_init_array>:
 8002698:	b570      	push	{r4, r5, r6, lr}
 800269a:	2600      	movs	r6, #0
 800269c:	4d0c      	ldr	r5, [pc, #48]	@ (80026d0 <__libc_init_array+0x38>)
 800269e:	4c0d      	ldr	r4, [pc, #52]	@ (80026d4 <__libc_init_array+0x3c>)
 80026a0:	1b64      	subs	r4, r4, r5
 80026a2:	10a4      	asrs	r4, r4, #2
 80026a4:	42a6      	cmp	r6, r4
 80026a6:	d109      	bne.n	80026bc <__libc_init_array+0x24>
 80026a8:	f000 fc76 	bl	8002f98 <_init>
 80026ac:	2600      	movs	r6, #0
 80026ae:	4d0a      	ldr	r5, [pc, #40]	@ (80026d8 <__libc_init_array+0x40>)
 80026b0:	4c0a      	ldr	r4, [pc, #40]	@ (80026dc <__libc_init_array+0x44>)
 80026b2:	1b64      	subs	r4, r4, r5
 80026b4:	10a4      	asrs	r4, r4, #2
 80026b6:	42a6      	cmp	r6, r4
 80026b8:	d105      	bne.n	80026c6 <__libc_init_array+0x2e>
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
 80026bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c0:	4798      	blx	r3
 80026c2:	3601      	adds	r6, #1
 80026c4:	e7ee      	b.n	80026a4 <__libc_init_array+0xc>
 80026c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ca:	4798      	blx	r3
 80026cc:	3601      	adds	r6, #1
 80026ce:	e7f2      	b.n	80026b6 <__libc_init_array+0x1e>
 80026d0:	08003020 	.word	0x08003020
 80026d4:	08003020 	.word	0x08003020
 80026d8:	08003020 	.word	0x08003020
 80026dc:	08003024 	.word	0x08003024

080026e0 <__retarget_lock_acquire_recursive>:
 80026e0:	4770      	bx	lr

080026e2 <__retarget_lock_release_recursive>:
 80026e2:	4770      	bx	lr

080026e4 <_free_r>:
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	4605      	mov	r5, r0
 80026e8:	2900      	cmp	r1, #0
 80026ea:	d040      	beq.n	800276e <_free_r+0x8a>
 80026ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026f0:	1f0c      	subs	r4, r1, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bfb8      	it	lt
 80026f6:	18e4      	addlt	r4, r4, r3
 80026f8:	f000 f8de 	bl	80028b8 <__malloc_lock>
 80026fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002770 <_free_r+0x8c>)
 80026fe:	6813      	ldr	r3, [r2, #0]
 8002700:	b933      	cbnz	r3, 8002710 <_free_r+0x2c>
 8002702:	6063      	str	r3, [r4, #4]
 8002704:	6014      	str	r4, [r2, #0]
 8002706:	4628      	mov	r0, r5
 8002708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800270c:	f000 b8da 	b.w	80028c4 <__malloc_unlock>
 8002710:	42a3      	cmp	r3, r4
 8002712:	d908      	bls.n	8002726 <_free_r+0x42>
 8002714:	6820      	ldr	r0, [r4, #0]
 8002716:	1821      	adds	r1, r4, r0
 8002718:	428b      	cmp	r3, r1
 800271a:	bf01      	itttt	eq
 800271c:	6819      	ldreq	r1, [r3, #0]
 800271e:	685b      	ldreq	r3, [r3, #4]
 8002720:	1809      	addeq	r1, r1, r0
 8002722:	6021      	streq	r1, [r4, #0]
 8002724:	e7ed      	b.n	8002702 <_free_r+0x1e>
 8002726:	461a      	mov	r2, r3
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	b10b      	cbz	r3, 8002730 <_free_r+0x4c>
 800272c:	42a3      	cmp	r3, r4
 800272e:	d9fa      	bls.n	8002726 <_free_r+0x42>
 8002730:	6811      	ldr	r1, [r2, #0]
 8002732:	1850      	adds	r0, r2, r1
 8002734:	42a0      	cmp	r0, r4
 8002736:	d10b      	bne.n	8002750 <_free_r+0x6c>
 8002738:	6820      	ldr	r0, [r4, #0]
 800273a:	4401      	add	r1, r0
 800273c:	1850      	adds	r0, r2, r1
 800273e:	4283      	cmp	r3, r0
 8002740:	6011      	str	r1, [r2, #0]
 8002742:	d1e0      	bne.n	8002706 <_free_r+0x22>
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4408      	add	r0, r1
 800274a:	6010      	str	r0, [r2, #0]
 800274c:	6053      	str	r3, [r2, #4]
 800274e:	e7da      	b.n	8002706 <_free_r+0x22>
 8002750:	d902      	bls.n	8002758 <_free_r+0x74>
 8002752:	230c      	movs	r3, #12
 8002754:	602b      	str	r3, [r5, #0]
 8002756:	e7d6      	b.n	8002706 <_free_r+0x22>
 8002758:	6820      	ldr	r0, [r4, #0]
 800275a:	1821      	adds	r1, r4, r0
 800275c:	428b      	cmp	r3, r1
 800275e:	bf01      	itttt	eq
 8002760:	6819      	ldreq	r1, [r3, #0]
 8002762:	685b      	ldreq	r3, [r3, #4]
 8002764:	1809      	addeq	r1, r1, r0
 8002766:	6021      	streq	r1, [r4, #0]
 8002768:	6063      	str	r3, [r4, #4]
 800276a:	6054      	str	r4, [r2, #4]
 800276c:	e7cb      	b.n	8002706 <_free_r+0x22>
 800276e:	bd38      	pop	{r3, r4, r5, pc}
 8002770:	20000560 	.word	0x20000560

08002774 <sbrk_aligned>:
 8002774:	b570      	push	{r4, r5, r6, lr}
 8002776:	4e0f      	ldr	r6, [pc, #60]	@ (80027b4 <sbrk_aligned+0x40>)
 8002778:	460c      	mov	r4, r1
 800277a:	6831      	ldr	r1, [r6, #0]
 800277c:	4605      	mov	r5, r0
 800277e:	b911      	cbnz	r1, 8002786 <sbrk_aligned+0x12>
 8002780:	f000 fba8 	bl	8002ed4 <_sbrk_r>
 8002784:	6030      	str	r0, [r6, #0]
 8002786:	4621      	mov	r1, r4
 8002788:	4628      	mov	r0, r5
 800278a:	f000 fba3 	bl	8002ed4 <_sbrk_r>
 800278e:	1c43      	adds	r3, r0, #1
 8002790:	d103      	bne.n	800279a <sbrk_aligned+0x26>
 8002792:	f04f 34ff 	mov.w	r4, #4294967295
 8002796:	4620      	mov	r0, r4
 8002798:	bd70      	pop	{r4, r5, r6, pc}
 800279a:	1cc4      	adds	r4, r0, #3
 800279c:	f024 0403 	bic.w	r4, r4, #3
 80027a0:	42a0      	cmp	r0, r4
 80027a2:	d0f8      	beq.n	8002796 <sbrk_aligned+0x22>
 80027a4:	1a21      	subs	r1, r4, r0
 80027a6:	4628      	mov	r0, r5
 80027a8:	f000 fb94 	bl	8002ed4 <_sbrk_r>
 80027ac:	3001      	adds	r0, #1
 80027ae:	d1f2      	bne.n	8002796 <sbrk_aligned+0x22>
 80027b0:	e7ef      	b.n	8002792 <sbrk_aligned+0x1e>
 80027b2:	bf00      	nop
 80027b4:	2000055c 	.word	0x2000055c

080027b8 <_malloc_r>:
 80027b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027bc:	1ccd      	adds	r5, r1, #3
 80027be:	f025 0503 	bic.w	r5, r5, #3
 80027c2:	3508      	adds	r5, #8
 80027c4:	2d0c      	cmp	r5, #12
 80027c6:	bf38      	it	cc
 80027c8:	250c      	movcc	r5, #12
 80027ca:	2d00      	cmp	r5, #0
 80027cc:	4606      	mov	r6, r0
 80027ce:	db01      	blt.n	80027d4 <_malloc_r+0x1c>
 80027d0:	42a9      	cmp	r1, r5
 80027d2:	d904      	bls.n	80027de <_malloc_r+0x26>
 80027d4:	230c      	movs	r3, #12
 80027d6:	6033      	str	r3, [r6, #0]
 80027d8:	2000      	movs	r0, #0
 80027da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028b4 <_malloc_r+0xfc>
 80027e2:	f000 f869 	bl	80028b8 <__malloc_lock>
 80027e6:	f8d8 3000 	ldr.w	r3, [r8]
 80027ea:	461c      	mov	r4, r3
 80027ec:	bb44      	cbnz	r4, 8002840 <_malloc_r+0x88>
 80027ee:	4629      	mov	r1, r5
 80027f0:	4630      	mov	r0, r6
 80027f2:	f7ff ffbf 	bl	8002774 <sbrk_aligned>
 80027f6:	1c43      	adds	r3, r0, #1
 80027f8:	4604      	mov	r4, r0
 80027fa:	d158      	bne.n	80028ae <_malloc_r+0xf6>
 80027fc:	f8d8 4000 	ldr.w	r4, [r8]
 8002800:	4627      	mov	r7, r4
 8002802:	2f00      	cmp	r7, #0
 8002804:	d143      	bne.n	800288e <_malloc_r+0xd6>
 8002806:	2c00      	cmp	r4, #0
 8002808:	d04b      	beq.n	80028a2 <_malloc_r+0xea>
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	4639      	mov	r1, r7
 800280e:	4630      	mov	r0, r6
 8002810:	eb04 0903 	add.w	r9, r4, r3
 8002814:	f000 fb5e 	bl	8002ed4 <_sbrk_r>
 8002818:	4581      	cmp	r9, r0
 800281a:	d142      	bne.n	80028a2 <_malloc_r+0xea>
 800281c:	6821      	ldr	r1, [r4, #0]
 800281e:	4630      	mov	r0, r6
 8002820:	1a6d      	subs	r5, r5, r1
 8002822:	4629      	mov	r1, r5
 8002824:	f7ff ffa6 	bl	8002774 <sbrk_aligned>
 8002828:	3001      	adds	r0, #1
 800282a:	d03a      	beq.n	80028a2 <_malloc_r+0xea>
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	442b      	add	r3, r5
 8002830:	6023      	str	r3, [r4, #0]
 8002832:	f8d8 3000 	ldr.w	r3, [r8]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	bb62      	cbnz	r2, 8002894 <_malloc_r+0xdc>
 800283a:	f8c8 7000 	str.w	r7, [r8]
 800283e:	e00f      	b.n	8002860 <_malloc_r+0xa8>
 8002840:	6822      	ldr	r2, [r4, #0]
 8002842:	1b52      	subs	r2, r2, r5
 8002844:	d420      	bmi.n	8002888 <_malloc_r+0xd0>
 8002846:	2a0b      	cmp	r2, #11
 8002848:	d917      	bls.n	800287a <_malloc_r+0xc2>
 800284a:	1961      	adds	r1, r4, r5
 800284c:	42a3      	cmp	r3, r4
 800284e:	6025      	str	r5, [r4, #0]
 8002850:	bf18      	it	ne
 8002852:	6059      	strne	r1, [r3, #4]
 8002854:	6863      	ldr	r3, [r4, #4]
 8002856:	bf08      	it	eq
 8002858:	f8c8 1000 	streq.w	r1, [r8]
 800285c:	5162      	str	r2, [r4, r5]
 800285e:	604b      	str	r3, [r1, #4]
 8002860:	4630      	mov	r0, r6
 8002862:	f000 f82f 	bl	80028c4 <__malloc_unlock>
 8002866:	f104 000b 	add.w	r0, r4, #11
 800286a:	1d23      	adds	r3, r4, #4
 800286c:	f020 0007 	bic.w	r0, r0, #7
 8002870:	1ac2      	subs	r2, r0, r3
 8002872:	bf1c      	itt	ne
 8002874:	1a1b      	subne	r3, r3, r0
 8002876:	50a3      	strne	r3, [r4, r2]
 8002878:	e7af      	b.n	80027da <_malloc_r+0x22>
 800287a:	6862      	ldr	r2, [r4, #4]
 800287c:	42a3      	cmp	r3, r4
 800287e:	bf0c      	ite	eq
 8002880:	f8c8 2000 	streq.w	r2, [r8]
 8002884:	605a      	strne	r2, [r3, #4]
 8002886:	e7eb      	b.n	8002860 <_malloc_r+0xa8>
 8002888:	4623      	mov	r3, r4
 800288a:	6864      	ldr	r4, [r4, #4]
 800288c:	e7ae      	b.n	80027ec <_malloc_r+0x34>
 800288e:	463c      	mov	r4, r7
 8002890:	687f      	ldr	r7, [r7, #4]
 8002892:	e7b6      	b.n	8002802 <_malloc_r+0x4a>
 8002894:	461a      	mov	r2, r3
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	42a3      	cmp	r3, r4
 800289a:	d1fb      	bne.n	8002894 <_malloc_r+0xdc>
 800289c:	2300      	movs	r3, #0
 800289e:	6053      	str	r3, [r2, #4]
 80028a0:	e7de      	b.n	8002860 <_malloc_r+0xa8>
 80028a2:	230c      	movs	r3, #12
 80028a4:	4630      	mov	r0, r6
 80028a6:	6033      	str	r3, [r6, #0]
 80028a8:	f000 f80c 	bl	80028c4 <__malloc_unlock>
 80028ac:	e794      	b.n	80027d8 <_malloc_r+0x20>
 80028ae:	6005      	str	r5, [r0, #0]
 80028b0:	e7d6      	b.n	8002860 <_malloc_r+0xa8>
 80028b2:	bf00      	nop
 80028b4:	20000560 	.word	0x20000560

080028b8 <__malloc_lock>:
 80028b8:	4801      	ldr	r0, [pc, #4]	@ (80028c0 <__malloc_lock+0x8>)
 80028ba:	f7ff bf11 	b.w	80026e0 <__retarget_lock_acquire_recursive>
 80028be:	bf00      	nop
 80028c0:	20000558 	.word	0x20000558

080028c4 <__malloc_unlock>:
 80028c4:	4801      	ldr	r0, [pc, #4]	@ (80028cc <__malloc_unlock+0x8>)
 80028c6:	f7ff bf0c 	b.w	80026e2 <__retarget_lock_release_recursive>
 80028ca:	bf00      	nop
 80028cc:	20000558 	.word	0x20000558

080028d0 <__ssputs_r>:
 80028d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d4:	461f      	mov	r7, r3
 80028d6:	688e      	ldr	r6, [r1, #8]
 80028d8:	4682      	mov	sl, r0
 80028da:	42be      	cmp	r6, r7
 80028dc:	460c      	mov	r4, r1
 80028de:	4690      	mov	r8, r2
 80028e0:	680b      	ldr	r3, [r1, #0]
 80028e2:	d82d      	bhi.n	8002940 <__ssputs_r+0x70>
 80028e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80028e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80028ec:	d026      	beq.n	800293c <__ssputs_r+0x6c>
 80028ee:	6965      	ldr	r5, [r4, #20]
 80028f0:	6909      	ldr	r1, [r1, #16]
 80028f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028f6:	eba3 0901 	sub.w	r9, r3, r1
 80028fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80028fe:	1c7b      	adds	r3, r7, #1
 8002900:	444b      	add	r3, r9
 8002902:	106d      	asrs	r5, r5, #1
 8002904:	429d      	cmp	r5, r3
 8002906:	bf38      	it	cc
 8002908:	461d      	movcc	r5, r3
 800290a:	0553      	lsls	r3, r2, #21
 800290c:	d527      	bpl.n	800295e <__ssputs_r+0x8e>
 800290e:	4629      	mov	r1, r5
 8002910:	f7ff ff52 	bl	80027b8 <_malloc_r>
 8002914:	4606      	mov	r6, r0
 8002916:	b360      	cbz	r0, 8002972 <__ssputs_r+0xa2>
 8002918:	464a      	mov	r2, r9
 800291a:	6921      	ldr	r1, [r4, #16]
 800291c:	f000 faf8 	bl	8002f10 <memcpy>
 8002920:	89a3      	ldrh	r3, [r4, #12]
 8002922:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800292a:	81a3      	strh	r3, [r4, #12]
 800292c:	6126      	str	r6, [r4, #16]
 800292e:	444e      	add	r6, r9
 8002930:	6026      	str	r6, [r4, #0]
 8002932:	463e      	mov	r6, r7
 8002934:	6165      	str	r5, [r4, #20]
 8002936:	eba5 0509 	sub.w	r5, r5, r9
 800293a:	60a5      	str	r5, [r4, #8]
 800293c:	42be      	cmp	r6, r7
 800293e:	d900      	bls.n	8002942 <__ssputs_r+0x72>
 8002940:	463e      	mov	r6, r7
 8002942:	4632      	mov	r2, r6
 8002944:	4641      	mov	r1, r8
 8002946:	6820      	ldr	r0, [r4, #0]
 8002948:	f000 faaa 	bl	8002ea0 <memmove>
 800294c:	2000      	movs	r0, #0
 800294e:	68a3      	ldr	r3, [r4, #8]
 8002950:	1b9b      	subs	r3, r3, r6
 8002952:	60a3      	str	r3, [r4, #8]
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	4433      	add	r3, r6
 8002958:	6023      	str	r3, [r4, #0]
 800295a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800295e:	462a      	mov	r2, r5
 8002960:	f000 fae4 	bl	8002f2c <_realloc_r>
 8002964:	4606      	mov	r6, r0
 8002966:	2800      	cmp	r0, #0
 8002968:	d1e0      	bne.n	800292c <__ssputs_r+0x5c>
 800296a:	4650      	mov	r0, sl
 800296c:	6921      	ldr	r1, [r4, #16]
 800296e:	f7ff feb9 	bl	80026e4 <_free_r>
 8002972:	230c      	movs	r3, #12
 8002974:	f8ca 3000 	str.w	r3, [sl]
 8002978:	89a3      	ldrh	r3, [r4, #12]
 800297a:	f04f 30ff 	mov.w	r0, #4294967295
 800297e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002982:	81a3      	strh	r3, [r4, #12]
 8002984:	e7e9      	b.n	800295a <__ssputs_r+0x8a>
	...

08002988 <_svfiprintf_r>:
 8002988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800298c:	4698      	mov	r8, r3
 800298e:	898b      	ldrh	r3, [r1, #12]
 8002990:	4607      	mov	r7, r0
 8002992:	061b      	lsls	r3, r3, #24
 8002994:	460d      	mov	r5, r1
 8002996:	4614      	mov	r4, r2
 8002998:	b09d      	sub	sp, #116	@ 0x74
 800299a:	d510      	bpl.n	80029be <_svfiprintf_r+0x36>
 800299c:	690b      	ldr	r3, [r1, #16]
 800299e:	b973      	cbnz	r3, 80029be <_svfiprintf_r+0x36>
 80029a0:	2140      	movs	r1, #64	@ 0x40
 80029a2:	f7ff ff09 	bl	80027b8 <_malloc_r>
 80029a6:	6028      	str	r0, [r5, #0]
 80029a8:	6128      	str	r0, [r5, #16]
 80029aa:	b930      	cbnz	r0, 80029ba <_svfiprintf_r+0x32>
 80029ac:	230c      	movs	r3, #12
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	b01d      	add	sp, #116	@ 0x74
 80029b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ba:	2340      	movs	r3, #64	@ 0x40
 80029bc:	616b      	str	r3, [r5, #20]
 80029be:	2300      	movs	r3, #0
 80029c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80029c2:	2320      	movs	r3, #32
 80029c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80029c8:	2330      	movs	r3, #48	@ 0x30
 80029ca:	f04f 0901 	mov.w	r9, #1
 80029ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80029d2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002b6c <_svfiprintf_r+0x1e4>
 80029d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80029da:	4623      	mov	r3, r4
 80029dc:	469a      	mov	sl, r3
 80029de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029e2:	b10a      	cbz	r2, 80029e8 <_svfiprintf_r+0x60>
 80029e4:	2a25      	cmp	r2, #37	@ 0x25
 80029e6:	d1f9      	bne.n	80029dc <_svfiprintf_r+0x54>
 80029e8:	ebba 0b04 	subs.w	fp, sl, r4
 80029ec:	d00b      	beq.n	8002a06 <_svfiprintf_r+0x7e>
 80029ee:	465b      	mov	r3, fp
 80029f0:	4622      	mov	r2, r4
 80029f2:	4629      	mov	r1, r5
 80029f4:	4638      	mov	r0, r7
 80029f6:	f7ff ff6b 	bl	80028d0 <__ssputs_r>
 80029fa:	3001      	adds	r0, #1
 80029fc:	f000 80a7 	beq.w	8002b4e <_svfiprintf_r+0x1c6>
 8002a00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a02:	445a      	add	r2, fp
 8002a04:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a06:	f89a 3000 	ldrb.w	r3, [sl]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 809f 	beq.w	8002b4e <_svfiprintf_r+0x1c6>
 8002a10:	2300      	movs	r3, #0
 8002a12:	f04f 32ff 	mov.w	r2, #4294967295
 8002a16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a1a:	f10a 0a01 	add.w	sl, sl, #1
 8002a1e:	9304      	str	r3, [sp, #16]
 8002a20:	9307      	str	r3, [sp, #28]
 8002a22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a26:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a28:	4654      	mov	r4, sl
 8002a2a:	2205      	movs	r2, #5
 8002a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a30:	484e      	ldr	r0, [pc, #312]	@ (8002b6c <_svfiprintf_r+0x1e4>)
 8002a32:	f000 fa5f 	bl	8002ef4 <memchr>
 8002a36:	9a04      	ldr	r2, [sp, #16]
 8002a38:	b9d8      	cbnz	r0, 8002a72 <_svfiprintf_r+0xea>
 8002a3a:	06d0      	lsls	r0, r2, #27
 8002a3c:	bf44      	itt	mi
 8002a3e:	2320      	movmi	r3, #32
 8002a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a44:	0711      	lsls	r1, r2, #28
 8002a46:	bf44      	itt	mi
 8002a48:	232b      	movmi	r3, #43	@ 0x2b
 8002a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8002a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a54:	d015      	beq.n	8002a82 <_svfiprintf_r+0xfa>
 8002a56:	4654      	mov	r4, sl
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f04f 0c0a 	mov.w	ip, #10
 8002a5e:	9a07      	ldr	r2, [sp, #28]
 8002a60:	4621      	mov	r1, r4
 8002a62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a66:	3b30      	subs	r3, #48	@ 0x30
 8002a68:	2b09      	cmp	r3, #9
 8002a6a:	d94b      	bls.n	8002b04 <_svfiprintf_r+0x17c>
 8002a6c:	b1b0      	cbz	r0, 8002a9c <_svfiprintf_r+0x114>
 8002a6e:	9207      	str	r2, [sp, #28]
 8002a70:	e014      	b.n	8002a9c <_svfiprintf_r+0x114>
 8002a72:	eba0 0308 	sub.w	r3, r0, r8
 8002a76:	fa09 f303 	lsl.w	r3, r9, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	46a2      	mov	sl, r4
 8002a7e:	9304      	str	r3, [sp, #16]
 8002a80:	e7d2      	b.n	8002a28 <_svfiprintf_r+0xa0>
 8002a82:	9b03      	ldr	r3, [sp, #12]
 8002a84:	1d19      	adds	r1, r3, #4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	9103      	str	r1, [sp, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bfbb      	ittet	lt
 8002a8e:	425b      	neglt	r3, r3
 8002a90:	f042 0202 	orrlt.w	r2, r2, #2
 8002a94:	9307      	strge	r3, [sp, #28]
 8002a96:	9307      	strlt	r3, [sp, #28]
 8002a98:	bfb8      	it	lt
 8002a9a:	9204      	strlt	r2, [sp, #16]
 8002a9c:	7823      	ldrb	r3, [r4, #0]
 8002a9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002aa0:	d10a      	bne.n	8002ab8 <_svfiprintf_r+0x130>
 8002aa2:	7863      	ldrb	r3, [r4, #1]
 8002aa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002aa6:	d132      	bne.n	8002b0e <_svfiprintf_r+0x186>
 8002aa8:	9b03      	ldr	r3, [sp, #12]
 8002aaa:	3402      	adds	r4, #2
 8002aac:	1d1a      	adds	r2, r3, #4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	9203      	str	r2, [sp, #12]
 8002ab2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002ab6:	9305      	str	r3, [sp, #20]
 8002ab8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002b70 <_svfiprintf_r+0x1e8>
 8002abc:	2203      	movs	r2, #3
 8002abe:	4650      	mov	r0, sl
 8002ac0:	7821      	ldrb	r1, [r4, #0]
 8002ac2:	f000 fa17 	bl	8002ef4 <memchr>
 8002ac6:	b138      	cbz	r0, 8002ad8 <_svfiprintf_r+0x150>
 8002ac8:	2240      	movs	r2, #64	@ 0x40
 8002aca:	9b04      	ldr	r3, [sp, #16]
 8002acc:	eba0 000a 	sub.w	r0, r0, sl
 8002ad0:	4082      	lsls	r2, r0
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	3401      	adds	r4, #1
 8002ad6:	9304      	str	r3, [sp, #16]
 8002ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002adc:	2206      	movs	r2, #6
 8002ade:	4825      	ldr	r0, [pc, #148]	@ (8002b74 <_svfiprintf_r+0x1ec>)
 8002ae0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ae4:	f000 fa06 	bl	8002ef4 <memchr>
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	d036      	beq.n	8002b5a <_svfiprintf_r+0x1d2>
 8002aec:	4b22      	ldr	r3, [pc, #136]	@ (8002b78 <_svfiprintf_r+0x1f0>)
 8002aee:	bb1b      	cbnz	r3, 8002b38 <_svfiprintf_r+0x1b0>
 8002af0:	9b03      	ldr	r3, [sp, #12]
 8002af2:	3307      	adds	r3, #7
 8002af4:	f023 0307 	bic.w	r3, r3, #7
 8002af8:	3308      	adds	r3, #8
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002afe:	4433      	add	r3, r6
 8002b00:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b02:	e76a      	b.n	80029da <_svfiprintf_r+0x52>
 8002b04:	460c      	mov	r4, r1
 8002b06:	2001      	movs	r0, #1
 8002b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b0c:	e7a8      	b.n	8002a60 <_svfiprintf_r+0xd8>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f04f 0c0a 	mov.w	ip, #10
 8002b14:	4619      	mov	r1, r3
 8002b16:	3401      	adds	r4, #1
 8002b18:	9305      	str	r3, [sp, #20]
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b20:	3a30      	subs	r2, #48	@ 0x30
 8002b22:	2a09      	cmp	r2, #9
 8002b24:	d903      	bls.n	8002b2e <_svfiprintf_r+0x1a6>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0c6      	beq.n	8002ab8 <_svfiprintf_r+0x130>
 8002b2a:	9105      	str	r1, [sp, #20]
 8002b2c:	e7c4      	b.n	8002ab8 <_svfiprintf_r+0x130>
 8002b2e:	4604      	mov	r4, r0
 8002b30:	2301      	movs	r3, #1
 8002b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b36:	e7f0      	b.n	8002b1a <_svfiprintf_r+0x192>
 8002b38:	ab03      	add	r3, sp, #12
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	462a      	mov	r2, r5
 8002b3e:	4638      	mov	r0, r7
 8002b40:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <_svfiprintf_r+0x1f4>)
 8002b42:	a904      	add	r1, sp, #16
 8002b44:	f3af 8000 	nop.w
 8002b48:	1c42      	adds	r2, r0, #1
 8002b4a:	4606      	mov	r6, r0
 8002b4c:	d1d6      	bne.n	8002afc <_svfiprintf_r+0x174>
 8002b4e:	89ab      	ldrh	r3, [r5, #12]
 8002b50:	065b      	lsls	r3, r3, #25
 8002b52:	f53f af2d 	bmi.w	80029b0 <_svfiprintf_r+0x28>
 8002b56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b58:	e72c      	b.n	80029b4 <_svfiprintf_r+0x2c>
 8002b5a:	ab03      	add	r3, sp, #12
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	462a      	mov	r2, r5
 8002b60:	4638      	mov	r0, r7
 8002b62:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <_svfiprintf_r+0x1f4>)
 8002b64:	a904      	add	r1, sp, #16
 8002b66:	f000 f87d 	bl	8002c64 <_printf_i>
 8002b6a:	e7ed      	b.n	8002b48 <_svfiprintf_r+0x1c0>
 8002b6c:	08002fe2 	.word	0x08002fe2
 8002b70:	08002fe8 	.word	0x08002fe8
 8002b74:	08002fec 	.word	0x08002fec
 8002b78:	00000000 	.word	0x00000000
 8002b7c:	080028d1 	.word	0x080028d1

08002b80 <_printf_common>:
 8002b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b84:	4616      	mov	r6, r2
 8002b86:	4698      	mov	r8, r3
 8002b88:	688a      	ldr	r2, [r1, #8]
 8002b8a:	690b      	ldr	r3, [r1, #16]
 8002b8c:	4607      	mov	r7, r0
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	bfb8      	it	lt
 8002b92:	4613      	movlt	r3, r2
 8002b94:	6033      	str	r3, [r6, #0]
 8002b96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b9a:	460c      	mov	r4, r1
 8002b9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ba0:	b10a      	cbz	r2, 8002ba6 <_printf_common+0x26>
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	6033      	str	r3, [r6, #0]
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	0699      	lsls	r1, r3, #26
 8002baa:	bf42      	ittt	mi
 8002bac:	6833      	ldrmi	r3, [r6, #0]
 8002bae:	3302      	addmi	r3, #2
 8002bb0:	6033      	strmi	r3, [r6, #0]
 8002bb2:	6825      	ldr	r5, [r4, #0]
 8002bb4:	f015 0506 	ands.w	r5, r5, #6
 8002bb8:	d106      	bne.n	8002bc8 <_printf_common+0x48>
 8002bba:	f104 0a19 	add.w	sl, r4, #25
 8002bbe:	68e3      	ldr	r3, [r4, #12]
 8002bc0:	6832      	ldr	r2, [r6, #0]
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	42ab      	cmp	r3, r5
 8002bc6:	dc2b      	bgt.n	8002c20 <_printf_common+0xa0>
 8002bc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002bcc:	6822      	ldr	r2, [r4, #0]
 8002bce:	3b00      	subs	r3, #0
 8002bd0:	bf18      	it	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	0692      	lsls	r2, r2, #26
 8002bd6:	d430      	bmi.n	8002c3a <_printf_common+0xba>
 8002bd8:	4641      	mov	r1, r8
 8002bda:	4638      	mov	r0, r7
 8002bdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002be0:	47c8      	blx	r9
 8002be2:	3001      	adds	r0, #1
 8002be4:	d023      	beq.n	8002c2e <_printf_common+0xae>
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	6922      	ldr	r2, [r4, #16]
 8002bea:	f003 0306 	and.w	r3, r3, #6
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	bf14      	ite	ne
 8002bf2:	2500      	movne	r5, #0
 8002bf4:	6833      	ldreq	r3, [r6, #0]
 8002bf6:	f04f 0600 	mov.w	r6, #0
 8002bfa:	bf08      	it	eq
 8002bfc:	68e5      	ldreq	r5, [r4, #12]
 8002bfe:	f104 041a 	add.w	r4, r4, #26
 8002c02:	bf08      	it	eq
 8002c04:	1aed      	subeq	r5, r5, r3
 8002c06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c0a:	bf08      	it	eq
 8002c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c10:	4293      	cmp	r3, r2
 8002c12:	bfc4      	itt	gt
 8002c14:	1a9b      	subgt	r3, r3, r2
 8002c16:	18ed      	addgt	r5, r5, r3
 8002c18:	42b5      	cmp	r5, r6
 8002c1a:	d11a      	bne.n	8002c52 <_printf_common+0xd2>
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	e008      	b.n	8002c32 <_printf_common+0xb2>
 8002c20:	2301      	movs	r3, #1
 8002c22:	4652      	mov	r2, sl
 8002c24:	4641      	mov	r1, r8
 8002c26:	4638      	mov	r0, r7
 8002c28:	47c8      	blx	r9
 8002c2a:	3001      	adds	r0, #1
 8002c2c:	d103      	bne.n	8002c36 <_printf_common+0xb6>
 8002c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c36:	3501      	adds	r5, #1
 8002c38:	e7c1      	b.n	8002bbe <_printf_common+0x3e>
 8002c3a:	2030      	movs	r0, #48	@ 0x30
 8002c3c:	18e1      	adds	r1, r4, r3
 8002c3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c48:	4422      	add	r2, r4
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c50:	e7c2      	b.n	8002bd8 <_printf_common+0x58>
 8002c52:	2301      	movs	r3, #1
 8002c54:	4622      	mov	r2, r4
 8002c56:	4641      	mov	r1, r8
 8002c58:	4638      	mov	r0, r7
 8002c5a:	47c8      	blx	r9
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	d0e6      	beq.n	8002c2e <_printf_common+0xae>
 8002c60:	3601      	adds	r6, #1
 8002c62:	e7d9      	b.n	8002c18 <_printf_common+0x98>

08002c64 <_printf_i>:
 8002c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c68:	7e0f      	ldrb	r7, [r1, #24]
 8002c6a:	4691      	mov	r9, r2
 8002c6c:	2f78      	cmp	r7, #120	@ 0x78
 8002c6e:	4680      	mov	r8, r0
 8002c70:	460c      	mov	r4, r1
 8002c72:	469a      	mov	sl, r3
 8002c74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c7a:	d807      	bhi.n	8002c8c <_printf_i+0x28>
 8002c7c:	2f62      	cmp	r7, #98	@ 0x62
 8002c7e:	d80a      	bhi.n	8002c96 <_printf_i+0x32>
 8002c80:	2f00      	cmp	r7, #0
 8002c82:	f000 80d1 	beq.w	8002e28 <_printf_i+0x1c4>
 8002c86:	2f58      	cmp	r7, #88	@ 0x58
 8002c88:	f000 80b8 	beq.w	8002dfc <_printf_i+0x198>
 8002c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002c94:	e03a      	b.n	8002d0c <_printf_i+0xa8>
 8002c96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c9a:	2b15      	cmp	r3, #21
 8002c9c:	d8f6      	bhi.n	8002c8c <_printf_i+0x28>
 8002c9e:	a101      	add	r1, pc, #4	@ (adr r1, 8002ca4 <_printf_i+0x40>)
 8002ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ca4:	08002cfd 	.word	0x08002cfd
 8002ca8:	08002d11 	.word	0x08002d11
 8002cac:	08002c8d 	.word	0x08002c8d
 8002cb0:	08002c8d 	.word	0x08002c8d
 8002cb4:	08002c8d 	.word	0x08002c8d
 8002cb8:	08002c8d 	.word	0x08002c8d
 8002cbc:	08002d11 	.word	0x08002d11
 8002cc0:	08002c8d 	.word	0x08002c8d
 8002cc4:	08002c8d 	.word	0x08002c8d
 8002cc8:	08002c8d 	.word	0x08002c8d
 8002ccc:	08002c8d 	.word	0x08002c8d
 8002cd0:	08002e0f 	.word	0x08002e0f
 8002cd4:	08002d3b 	.word	0x08002d3b
 8002cd8:	08002dc9 	.word	0x08002dc9
 8002cdc:	08002c8d 	.word	0x08002c8d
 8002ce0:	08002c8d 	.word	0x08002c8d
 8002ce4:	08002e31 	.word	0x08002e31
 8002ce8:	08002c8d 	.word	0x08002c8d
 8002cec:	08002d3b 	.word	0x08002d3b
 8002cf0:	08002c8d 	.word	0x08002c8d
 8002cf4:	08002c8d 	.word	0x08002c8d
 8002cf8:	08002dd1 	.word	0x08002dd1
 8002cfc:	6833      	ldr	r3, [r6, #0]
 8002cfe:	1d1a      	adds	r2, r3, #4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6032      	str	r2, [r6, #0]
 8002d04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e09c      	b.n	8002e4a <_printf_i+0x1e6>
 8002d10:	6833      	ldr	r3, [r6, #0]
 8002d12:	6820      	ldr	r0, [r4, #0]
 8002d14:	1d19      	adds	r1, r3, #4
 8002d16:	6031      	str	r1, [r6, #0]
 8002d18:	0606      	lsls	r6, r0, #24
 8002d1a:	d501      	bpl.n	8002d20 <_printf_i+0xbc>
 8002d1c:	681d      	ldr	r5, [r3, #0]
 8002d1e:	e003      	b.n	8002d28 <_printf_i+0xc4>
 8002d20:	0645      	lsls	r5, r0, #25
 8002d22:	d5fb      	bpl.n	8002d1c <_printf_i+0xb8>
 8002d24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d28:	2d00      	cmp	r5, #0
 8002d2a:	da03      	bge.n	8002d34 <_printf_i+0xd0>
 8002d2c:	232d      	movs	r3, #45	@ 0x2d
 8002d2e:	426d      	negs	r5, r5
 8002d30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d34:	230a      	movs	r3, #10
 8002d36:	4858      	ldr	r0, [pc, #352]	@ (8002e98 <_printf_i+0x234>)
 8002d38:	e011      	b.n	8002d5e <_printf_i+0xfa>
 8002d3a:	6821      	ldr	r1, [r4, #0]
 8002d3c:	6833      	ldr	r3, [r6, #0]
 8002d3e:	0608      	lsls	r0, r1, #24
 8002d40:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d44:	d402      	bmi.n	8002d4c <_printf_i+0xe8>
 8002d46:	0649      	lsls	r1, r1, #25
 8002d48:	bf48      	it	mi
 8002d4a:	b2ad      	uxthmi	r5, r5
 8002d4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d4e:	6033      	str	r3, [r6, #0]
 8002d50:	bf14      	ite	ne
 8002d52:	230a      	movne	r3, #10
 8002d54:	2308      	moveq	r3, #8
 8002d56:	4850      	ldr	r0, [pc, #320]	@ (8002e98 <_printf_i+0x234>)
 8002d58:	2100      	movs	r1, #0
 8002d5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d5e:	6866      	ldr	r6, [r4, #4]
 8002d60:	2e00      	cmp	r6, #0
 8002d62:	60a6      	str	r6, [r4, #8]
 8002d64:	db05      	blt.n	8002d72 <_printf_i+0x10e>
 8002d66:	6821      	ldr	r1, [r4, #0]
 8002d68:	432e      	orrs	r6, r5
 8002d6a:	f021 0104 	bic.w	r1, r1, #4
 8002d6e:	6021      	str	r1, [r4, #0]
 8002d70:	d04b      	beq.n	8002e0a <_printf_i+0x1a6>
 8002d72:	4616      	mov	r6, r2
 8002d74:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d78:	fb03 5711 	mls	r7, r3, r1, r5
 8002d7c:	5dc7      	ldrb	r7, [r0, r7]
 8002d7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d82:	462f      	mov	r7, r5
 8002d84:	42bb      	cmp	r3, r7
 8002d86:	460d      	mov	r5, r1
 8002d88:	d9f4      	bls.n	8002d74 <_printf_i+0x110>
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d10b      	bne.n	8002da6 <_printf_i+0x142>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	07df      	lsls	r7, r3, #31
 8002d92:	d508      	bpl.n	8002da6 <_printf_i+0x142>
 8002d94:	6923      	ldr	r3, [r4, #16]
 8002d96:	6861      	ldr	r1, [r4, #4]
 8002d98:	4299      	cmp	r1, r3
 8002d9a:	bfde      	ittt	le
 8002d9c:	2330      	movle	r3, #48	@ 0x30
 8002d9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002da2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002da6:	1b92      	subs	r2, r2, r6
 8002da8:	6122      	str	r2, [r4, #16]
 8002daa:	464b      	mov	r3, r9
 8002dac:	4621      	mov	r1, r4
 8002dae:	4640      	mov	r0, r8
 8002db0:	f8cd a000 	str.w	sl, [sp]
 8002db4:	aa03      	add	r2, sp, #12
 8002db6:	f7ff fee3 	bl	8002b80 <_printf_common>
 8002dba:	3001      	adds	r0, #1
 8002dbc:	d14a      	bne.n	8002e54 <_printf_i+0x1f0>
 8002dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc2:	b004      	add	sp, #16
 8002dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	f043 0320 	orr.w	r3, r3, #32
 8002dce:	6023      	str	r3, [r4, #0]
 8002dd0:	2778      	movs	r7, #120	@ 0x78
 8002dd2:	4832      	ldr	r0, [pc, #200]	@ (8002e9c <_printf_i+0x238>)
 8002dd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	6831      	ldr	r1, [r6, #0]
 8002ddc:	061f      	lsls	r7, r3, #24
 8002dde:	f851 5b04 	ldr.w	r5, [r1], #4
 8002de2:	d402      	bmi.n	8002dea <_printf_i+0x186>
 8002de4:	065f      	lsls	r7, r3, #25
 8002de6:	bf48      	it	mi
 8002de8:	b2ad      	uxthmi	r5, r5
 8002dea:	6031      	str	r1, [r6, #0]
 8002dec:	07d9      	lsls	r1, r3, #31
 8002dee:	bf44      	itt	mi
 8002df0:	f043 0320 	orrmi.w	r3, r3, #32
 8002df4:	6023      	strmi	r3, [r4, #0]
 8002df6:	b11d      	cbz	r5, 8002e00 <_printf_i+0x19c>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	e7ad      	b.n	8002d58 <_printf_i+0xf4>
 8002dfc:	4826      	ldr	r0, [pc, #152]	@ (8002e98 <_printf_i+0x234>)
 8002dfe:	e7e9      	b.n	8002dd4 <_printf_i+0x170>
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	f023 0320 	bic.w	r3, r3, #32
 8002e06:	6023      	str	r3, [r4, #0]
 8002e08:	e7f6      	b.n	8002df8 <_printf_i+0x194>
 8002e0a:	4616      	mov	r6, r2
 8002e0c:	e7bd      	b.n	8002d8a <_printf_i+0x126>
 8002e0e:	6833      	ldr	r3, [r6, #0]
 8002e10:	6825      	ldr	r5, [r4, #0]
 8002e12:	1d18      	adds	r0, r3, #4
 8002e14:	6961      	ldr	r1, [r4, #20]
 8002e16:	6030      	str	r0, [r6, #0]
 8002e18:	062e      	lsls	r6, r5, #24
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	d501      	bpl.n	8002e22 <_printf_i+0x1be>
 8002e1e:	6019      	str	r1, [r3, #0]
 8002e20:	e002      	b.n	8002e28 <_printf_i+0x1c4>
 8002e22:	0668      	lsls	r0, r5, #25
 8002e24:	d5fb      	bpl.n	8002e1e <_printf_i+0x1ba>
 8002e26:	8019      	strh	r1, [r3, #0]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	4616      	mov	r6, r2
 8002e2c:	6123      	str	r3, [r4, #16]
 8002e2e:	e7bc      	b.n	8002daa <_printf_i+0x146>
 8002e30:	6833      	ldr	r3, [r6, #0]
 8002e32:	2100      	movs	r1, #0
 8002e34:	1d1a      	adds	r2, r3, #4
 8002e36:	6032      	str	r2, [r6, #0]
 8002e38:	681e      	ldr	r6, [r3, #0]
 8002e3a:	6862      	ldr	r2, [r4, #4]
 8002e3c:	4630      	mov	r0, r6
 8002e3e:	f000 f859 	bl	8002ef4 <memchr>
 8002e42:	b108      	cbz	r0, 8002e48 <_printf_i+0x1e4>
 8002e44:	1b80      	subs	r0, r0, r6
 8002e46:	6060      	str	r0, [r4, #4]
 8002e48:	6863      	ldr	r3, [r4, #4]
 8002e4a:	6123      	str	r3, [r4, #16]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e52:	e7aa      	b.n	8002daa <_printf_i+0x146>
 8002e54:	4632      	mov	r2, r6
 8002e56:	4649      	mov	r1, r9
 8002e58:	4640      	mov	r0, r8
 8002e5a:	6923      	ldr	r3, [r4, #16]
 8002e5c:	47d0      	blx	sl
 8002e5e:	3001      	adds	r0, #1
 8002e60:	d0ad      	beq.n	8002dbe <_printf_i+0x15a>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	079b      	lsls	r3, r3, #30
 8002e66:	d413      	bmi.n	8002e90 <_printf_i+0x22c>
 8002e68:	68e0      	ldr	r0, [r4, #12]
 8002e6a:	9b03      	ldr	r3, [sp, #12]
 8002e6c:	4298      	cmp	r0, r3
 8002e6e:	bfb8      	it	lt
 8002e70:	4618      	movlt	r0, r3
 8002e72:	e7a6      	b.n	8002dc2 <_printf_i+0x15e>
 8002e74:	2301      	movs	r3, #1
 8002e76:	4632      	mov	r2, r6
 8002e78:	4649      	mov	r1, r9
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	47d0      	blx	sl
 8002e7e:	3001      	adds	r0, #1
 8002e80:	d09d      	beq.n	8002dbe <_printf_i+0x15a>
 8002e82:	3501      	adds	r5, #1
 8002e84:	68e3      	ldr	r3, [r4, #12]
 8002e86:	9903      	ldr	r1, [sp, #12]
 8002e88:	1a5b      	subs	r3, r3, r1
 8002e8a:	42ab      	cmp	r3, r5
 8002e8c:	dcf2      	bgt.n	8002e74 <_printf_i+0x210>
 8002e8e:	e7eb      	b.n	8002e68 <_printf_i+0x204>
 8002e90:	2500      	movs	r5, #0
 8002e92:	f104 0619 	add.w	r6, r4, #25
 8002e96:	e7f5      	b.n	8002e84 <_printf_i+0x220>
 8002e98:	08002ff3 	.word	0x08002ff3
 8002e9c:	08003004 	.word	0x08003004

08002ea0 <memmove>:
 8002ea0:	4288      	cmp	r0, r1
 8002ea2:	b510      	push	{r4, lr}
 8002ea4:	eb01 0402 	add.w	r4, r1, r2
 8002ea8:	d902      	bls.n	8002eb0 <memmove+0x10>
 8002eaa:	4284      	cmp	r4, r0
 8002eac:	4623      	mov	r3, r4
 8002eae:	d807      	bhi.n	8002ec0 <memmove+0x20>
 8002eb0:	1e43      	subs	r3, r0, #1
 8002eb2:	42a1      	cmp	r1, r4
 8002eb4:	d008      	beq.n	8002ec8 <memmove+0x28>
 8002eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002eba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ebe:	e7f8      	b.n	8002eb2 <memmove+0x12>
 8002ec0:	4601      	mov	r1, r0
 8002ec2:	4402      	add	r2, r0
 8002ec4:	428a      	cmp	r2, r1
 8002ec6:	d100      	bne.n	8002eca <memmove+0x2a>
 8002ec8:	bd10      	pop	{r4, pc}
 8002eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ed2:	e7f7      	b.n	8002ec4 <memmove+0x24>

08002ed4 <_sbrk_r>:
 8002ed4:	b538      	push	{r3, r4, r5, lr}
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	4d05      	ldr	r5, [pc, #20]	@ (8002ef0 <_sbrk_r+0x1c>)
 8002eda:	4604      	mov	r4, r0
 8002edc:	4608      	mov	r0, r1
 8002ede:	602b      	str	r3, [r5, #0]
 8002ee0:	f7fd fbe0 	bl	80006a4 <_sbrk>
 8002ee4:	1c43      	adds	r3, r0, #1
 8002ee6:	d102      	bne.n	8002eee <_sbrk_r+0x1a>
 8002ee8:	682b      	ldr	r3, [r5, #0]
 8002eea:	b103      	cbz	r3, 8002eee <_sbrk_r+0x1a>
 8002eec:	6023      	str	r3, [r4, #0]
 8002eee:	bd38      	pop	{r3, r4, r5, pc}
 8002ef0:	20000554 	.word	0x20000554

08002ef4 <memchr>:
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	b510      	push	{r4, lr}
 8002ef8:	b2c9      	uxtb	r1, r1
 8002efa:	4402      	add	r2, r0
 8002efc:	4293      	cmp	r3, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	d101      	bne.n	8002f06 <memchr+0x12>
 8002f02:	2000      	movs	r0, #0
 8002f04:	e003      	b.n	8002f0e <memchr+0x1a>
 8002f06:	7804      	ldrb	r4, [r0, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	428c      	cmp	r4, r1
 8002f0c:	d1f6      	bne.n	8002efc <memchr+0x8>
 8002f0e:	bd10      	pop	{r4, pc}

08002f10 <memcpy>:
 8002f10:	440a      	add	r2, r1
 8002f12:	4291      	cmp	r1, r2
 8002f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f18:	d100      	bne.n	8002f1c <memcpy+0xc>
 8002f1a:	4770      	bx	lr
 8002f1c:	b510      	push	{r4, lr}
 8002f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f22:	4291      	cmp	r1, r2
 8002f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f28:	d1f9      	bne.n	8002f1e <memcpy+0xe>
 8002f2a:	bd10      	pop	{r4, pc}

08002f2c <_realloc_r>:
 8002f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f30:	4607      	mov	r7, r0
 8002f32:	4614      	mov	r4, r2
 8002f34:	460d      	mov	r5, r1
 8002f36:	b921      	cbnz	r1, 8002f42 <_realloc_r+0x16>
 8002f38:	4611      	mov	r1, r2
 8002f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f3e:	f7ff bc3b 	b.w	80027b8 <_malloc_r>
 8002f42:	b92a      	cbnz	r2, 8002f50 <_realloc_r+0x24>
 8002f44:	f7ff fbce 	bl	80026e4 <_free_r>
 8002f48:	4625      	mov	r5, r4
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f50:	f000 f81a 	bl	8002f88 <_malloc_usable_size_r>
 8002f54:	4284      	cmp	r4, r0
 8002f56:	4606      	mov	r6, r0
 8002f58:	d802      	bhi.n	8002f60 <_realloc_r+0x34>
 8002f5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002f5e:	d8f4      	bhi.n	8002f4a <_realloc_r+0x1e>
 8002f60:	4621      	mov	r1, r4
 8002f62:	4638      	mov	r0, r7
 8002f64:	f7ff fc28 	bl	80027b8 <_malloc_r>
 8002f68:	4680      	mov	r8, r0
 8002f6a:	b908      	cbnz	r0, 8002f70 <_realloc_r+0x44>
 8002f6c:	4645      	mov	r5, r8
 8002f6e:	e7ec      	b.n	8002f4a <_realloc_r+0x1e>
 8002f70:	42b4      	cmp	r4, r6
 8002f72:	4622      	mov	r2, r4
 8002f74:	4629      	mov	r1, r5
 8002f76:	bf28      	it	cs
 8002f78:	4632      	movcs	r2, r6
 8002f7a:	f7ff ffc9 	bl	8002f10 <memcpy>
 8002f7e:	4629      	mov	r1, r5
 8002f80:	4638      	mov	r0, r7
 8002f82:	f7ff fbaf 	bl	80026e4 <_free_r>
 8002f86:	e7f1      	b.n	8002f6c <_realloc_r+0x40>

08002f88 <_malloc_usable_size_r>:
 8002f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f8c:	1f18      	subs	r0, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bfbc      	itt	lt
 8002f92:	580b      	ldrlt	r3, [r1, r0]
 8002f94:	18c0      	addlt	r0, r0, r3
 8002f96:	4770      	bx	lr

08002f98 <_init>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr

08002fa4 <_fini>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	bf00      	nop
 8002fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002faa:	bc08      	pop	{r3}
 8002fac:	469e      	mov	lr, r3
 8002fae:	4770      	bx	lr
